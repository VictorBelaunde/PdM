/**
 ******************************************************************************
	API para incializar, contabilizar y resetear el retardo
 ******************************************************************************
 */

/* Includes ------------------------------------------------------------------*/

#include "API_debounce.h"
#include "API_delay.h" //necesita de esta API para trabajar con retardos

delay_t delay_estados;
bool_t fallingOk = false; //variable para detectar que occurrió un flanco descendente


void debounceFSM_init(){
	debounceState_t = BUTTON_UP;
	delaydelayInit(&delay_estados, RETARDO);
}

void debounceFSM_update(){
	switch (debounceState_t){
	case BUTTON_UP:
		if (BSP_PB_GetState(BUTTON_USER)){
			debounceState_t = BUTTON_FALLING;
			delayRead(&delay_estados);
		}
		break;

	case BUTTON_FALLING:
		if (delayRead(&delay_estados)){
			if (BSP_PB_GetState(BUTTON_USER)){
				estadoActual = BUTTON_DOWN;
				fallingOk = true;

			}
			else{
				estadoActual = BUTTON_UP;
			}
		}
		break;
	case BUTTON_DOWN:
		if (!BSP_PB_GetState(BUTTON_USER)){
			estadoActual = BUTTON_RAISING;
			delayRead(&delay_estados);
		}
		break;
	case BUTTON_RAISING:
		if (delayRead(&delay_estados)){
			if (!BSP_PB_GetState(BUTTON_USER)){
				estadoActual = BUTTON_UP;

			}
			else{
				estadoActual = BUTTON_DOWN;
			}
		}
		break;

	}

}

/* La función readKey lee una variable interna del módulo y devuelve true o false
 * si la tecla fue presionada.  Si devuelve true, resetea (pone en false) el estado
 * de la variable.*/

bool_t readKey(){
	bool_t returnValue = false
			if (fallingOk){
				fallingOk = false;
				returnValue = true;
			}
	return returnValue;
}


