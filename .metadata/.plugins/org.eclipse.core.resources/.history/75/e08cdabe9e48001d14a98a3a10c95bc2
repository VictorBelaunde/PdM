/*******************************************************************************
* @file    API_clima.c
* @author  Victor Belaunde
* @brief   Modulo para controlar los estados del CLIMA por medio de mediciones de temperatura

*******************************************************************************/


/*******************************************************************************
 * Includes
 ******************************************************************************/

#include <API_clima.h>
#include "API_delay.h" //necesita de esta API para trabajar con retardos

/*******************************************************************************
 * Privates macros
 ******************************************************************************/
#define TEMPMAXIMA 34 //Temperatura maxima permitida antes de activar la refrigeracion
#define TEMPMINIMA 22 //Temperatura minima permitida antes de activar la calefaccion

/*******************************************************************************
 * Private global variables
 ******************************************************************************/

static delay_t delay_estados;
static bool_t fallingOk = false; //variable para detectar que occurrió un flanco descendente

static ClimaState_t estadoActual;
static int8_t temperaturaActual; //variable para cargar la temperatura sensada en otro modulo


void climaMEF_init(){
	estadoActual = CALIBRACION;

}

void climaMEF_update(){
	switch (estadoActual){
	case CALIBRACION:
		temperaturaActual = tomaTemperatura();
		if (temperaturaActual < TEMPMINIMA){
			estadoActual = FRIO;
			activaCalefaccion();
		}
		if (temperaturaActual > TEMPMAXIMA){
			estadoActual = CALIDO;
			activaRefrigeracion();
		}
		break;

	case FRIO:
		temperaturaActual = tomaTemperatura();
		if (temperaturaActual > TEMPMINIMA){
				estadoActual = REPOSO;
				desactivaCalefaccion();
			}
		break;

	case CALIDO:
		temperaturaActual = tomaTemperatura();
		if (temperaturaActual < TEMPMAXIMA){
				estadoActual = REPOSO;
				desactivaRefrigeracion();
			}
		break;

	case REPOSO:
		temperaturaActual = tomaTemperatura();
		if (temperaturaActual > TEMPMAXIMA){
			estadoActual = CALIDO;
			activaRefrigeracion();
			}
			else if (temperaturaActual < TEMPMINIMA){
				estadoActual = FRIO;
				activaCalefaccion();
			}
		break;

	}
}

/* La función readKey lee una variable interna del módulo y devuelve true o false
 * si la tecla fue presionada.  Si devuelve true, resetea (pone en false) el estado
 * de la variable.*/

bool_t readKey_descendente(){
	bool_t returnValue = false;
			if (fallingOk){
				fallingOk = false;
				returnValue = true;
			}
	return returnValue;
}


