/*******************************************************************************
* @file    API_uart.h
* @author  Victor Belaunde
* @brief   Modulo para incializar, enviar y recibir por USART definido en USARTx.
* Tambien convierte en nuemeros de dos cifras lo que se recibe (Se debe utilizar Monitor serie)
*******************************************************************************/


/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __API_UART_H
#define __API_UART_H

/*******************************************************************************
 * Includes
 ******************************************************************************/
#include <stdio.h>
#include "stm32f4xx_hal.h"  		/* <- HAL include */
#include "stm32f4xx_nucleo_144.h" 	/* <- BSP include */
#include <stdint.h>
#include <stdbool.h>
#include <string.h>  //para incluir la funcion strlen()



/*******************************************************************************
 * Defines
 ******************************************************************************/
/* Definition for USARTx clock resources */
#define USARTx                           USART3
#define USARTx_CLK_ENABLE()              __HAL_RCC_USART3_CLK_ENABLE();
#define USARTx_RX_GPIO_CLK_ENABLE()      __HAL_RCC_GPIOD_CLK_ENABLE()
#define USARTx_TX_GPIO_CLK_ENABLE()      __HAL_RCC_GPIOD_CLK_ENABLE()

#define USARTx_FORCE_RESET()             __HAL_RCC_USART3_FORCE_RESET()
#define USARTx_RELEASE_RESET()           __HAL_RCC_USART3_RELEASE_RESET()

/* Definition for USARTx Pins */
#define USARTx_TX_PIN                    GPIO_PIN_8
#define USARTx_TX_GPIO_PORT              GPIOD
#define USARTx_TX_AF                     GPIO_AF7_USART3
#define USARTx_RX_PIN                    GPIO_PIN_9
#define USARTx_RX_GPIO_PORT              GPIOD
#define USARTx_RX_AF                     GPIO_AF7_USART3

/*******************************************************************************
 * Variables
 ******************************************************************************/
uint16_t tamaño_maximo_mensaje = 500; //Configuro el tamaño maximo del mensaje que imprime por UART
const uint32_t tiempo_max_espera = 3000; //Se define el tiempo antes de timeOut

typedef uint32_t tick_t;
typedef bool bool_t; //Se utiliza para obtener un tipo de variable bool independiente del microcontrolador que se utilice

/*******************************************************************************
 * Function prototypes
 ******************************************************************************/
bool_t uartInit();
void uartSendString(uint8_t * pstring);
void uartSendStringSize(uint8_t * pstring, uint16_t size);
bool_t uartReceiveStringSize(uint8_t * pstring, uint16_t size);
uint8_t convierteNumero(uint8_t * datosConvertir);



#endif /* __API_UART_H */

