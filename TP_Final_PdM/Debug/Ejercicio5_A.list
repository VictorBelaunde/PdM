
Ejercicio5_A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000334c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080034fc  080034fc  000134fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035ec  080035ec  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080035ec  080035ec  000135ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035f4  080035f4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035f4  080035f4  000135f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035f8  080035f8  000135f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080035fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000078  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000f4  200000f4  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000093b2  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a60  00000000  00000000  0002945e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000808  00000000  00000000  0002aec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000758  00000000  00000000  0002b6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003510  00000000  00000000  0002be20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ca6f  00000000  00000000  0002f330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3138  00000000  00000000  0003bd9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011eed7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002664  00000000  00000000  0011ef28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080034e4 	.word	0x080034e4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	080034e4 	.word	0x080034e4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <uartInit>:
/**
 * @brief	funcion que inicializa la UART
 * @param	none
 * @return	verdadero si inicio correctamente
 */
bool_t uartInit(){
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
		                  BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
	      - Stop Bit    = One Stop bit
	      - Parity      = ODD parity
	      - BaudRate    = 9600 baud
	      - Hardware flow control disabled (RTS and CTS signals) */
	UartHandle.Instance        = USARTx;
 800059a:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <uartInit+0x5c>)
 800059c:	4a15      	ldr	r2, [pc, #84]	; (80005f4 <uartInit+0x60>)
 800059e:	601a      	str	r2, [r3, #0]
	UartHandle.Init.BaudRate   = 9600;
 80005a0:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <uartInit+0x5c>)
 80005a2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005a6:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <uartInit+0x5c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80005ae:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <uartInit+0x5c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <uartInit+0x5c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80005ba:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <uartInit+0x5c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <uartInit+0x5c>)
 80005c2:	220c      	movs	r2, #12
 80005c4:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c6:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <uartInit+0x5c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	61da      	str	r2, [r3, #28]
	bool_t init_uart_ok = false;
 80005cc:	2300      	movs	r3, #0
 80005ce:	71fb      	strb	r3, [r7, #7]

	if (HAL_UART_Init(&UartHandle) == HAL_OK)
 80005d0:	4807      	ldr	r0, [pc, #28]	; (80005f0 <uartInit+0x5c>)
 80005d2:	f001 fa89 	bl	8001ae8 <HAL_UART_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d104      	bne.n	80005e6 <uartInit+0x52>
	{
		init_uart_ok = true;
 80005dc:	2301      	movs	r3, #1
 80005de:	71fb      	strb	r3, [r7, #7]
		printf("Inicializacion exitosa");
 80005e0:	4805      	ldr	r0, [pc, #20]	; (80005f8 <uartInit+0x64>)
 80005e2:	f001 fff1 	bl	80025c8 <iprintf>

	}

	return init_uart_ok;
 80005e6:	79fb      	ldrb	r3, [r7, #7]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000098 	.word	0x20000098
 80005f4:	40004800 	.word	0x40004800
 80005f8:	080034fc 	.word	0x080034fc

080005fc <uartReceiveStringSize>:
/**
 * @brief	Recibe mensaje por UART por medio de polling (encuesta)
 * @param	puntero a la cadena que se carga de recibir algo por el puerto y el tamaño del "buffer"
 * @return	true si completó el tamaño del buffer, de lo contrario no dispara HAL_OK
 */
bool_t uartReceiveStringSize(uint8_t * pstring, uint16_t size){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	460b      	mov	r3, r1
 8000606:	807b      	strh	r3, [r7, #2]

	if (HAL_UART_Receive(&UartHandle, pstring, size, tiempo_max_espera)== HAL_OK){
 8000608:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800060c:	887a      	ldrh	r2, [r7, #2]
 800060e:	6879      	ldr	r1, [r7, #4]
 8000610:	4806      	ldr	r0, [pc, #24]	; (800062c <uartReceiveStringSize+0x30>)
 8000612:	f001 fb48 	bl	8001ca6 <HAL_UART_Receive>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d101      	bne.n	8000620 <uartReceiveStringSize+0x24>
		return true;
 800061c:	2301      	movs	r3, #1
 800061e:	e000      	b.n	8000622 <uartReceiveStringSize+0x26>
	}
	else{
		return false;
 8000620:	2300      	movs	r3, #0
	}

}
 8000622:	4618      	mov	r0, r3
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000098 	.word	0x20000098

08000630 <convierteNumero>:

uint8_t convierteNumero(uint8_t * datosConvertir){
 8000630:	b480      	push	{r7}
 8000632:	b087      	sub	sp, #28
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	uint8_t totalConvertido = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	75fb      	strb	r3, [r7, #23]
	int convEntero1erCifra = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	613b      	str	r3, [r7, #16]
	int convEntero2daCifra =0;
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
	convEntero1erCifra = datosConvertir[0]-'0';
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	3b30      	subs	r3, #48	; 0x30
 800064a:	613b      	str	r3, [r7, #16]
	totalConvertido = convEntero1erCifra * 10;
 800064c:	693b      	ldr	r3, [r7, #16]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	461a      	mov	r2, r3
 8000652:	0092      	lsls	r2, r2, #2
 8000654:	4413      	add	r3, r2
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	75fb      	strb	r3, [r7, #23]

	convEntero2daCifra = datosConvertir[1]-'0';
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	3301      	adds	r3, #1
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	3b30      	subs	r3, #48	; 0x30
 8000662:	60fb      	str	r3, [r7, #12]
	totalConvertido = totalConvertido + convEntero2daCifra;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	b2da      	uxtb	r2, r3
 8000668:	7dfb      	ldrb	r3, [r7, #23]
 800066a:	4413      	add	r3, r2
 800066c:	75fb      	strb	r3, [r7, #23]
	return totalConvertido;
 800066e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000670:	4618      	mov	r0, r3
 8000672:	371c      	adds	r7, #28
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <__io_putchar>:


PUTCHAR_PROTOTYPE
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
 8000684:	1d39      	adds	r1, r7, #4
 8000686:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800068a:	2201      	movs	r2, #1
 800068c:	4803      	ldr	r0, [pc, #12]	; (800069c <__io_putchar+0x20>)
 800068e:	f001 fa78 	bl	8001b82 <HAL_UART_Transmit>

  return ch;
 8000692:	687b      	ldr	r3, [r7, #4]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000098 	.word	0x20000098

080006a0 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	; 0x28
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d10e      	bne.n	80006ce <BSP_LED_Init+0x2e>
 80006b0:	2300      	movs	r3, #0
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <BSP_LED_Init+0x94>)
 80006b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b8:	4a1e      	ldr	r2, [pc, #120]	; (8000734 <BSP_LED_Init+0x94>)
 80006ba:	f043 0302 	orr.w	r3, r3, #2
 80006be:	6313      	str	r3, [r2, #48]	; 0x30
 80006c0:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <BSP_LED_Init+0x94>)
 80006c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c4:	f003 0302 	and.w	r3, r3, #2
 80006c8:	613b      	str	r3, [r7, #16]
 80006ca:	693b      	ldr	r3, [r7, #16]
 80006cc:	e00d      	b.n	80006ea <BSP_LED_Init+0x4a>
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	4b18      	ldr	r3, [pc, #96]	; (8000734 <BSP_LED_Init+0x94>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a17      	ldr	r2, [pc, #92]	; (8000734 <BSP_LED_Init+0x94>)
 80006d8:	f043 0302 	orr.w	r3, r3, #2
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b15      	ldr	r3, [pc, #84]	; (8000734 <BSP_LED_Init+0x94>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0302 	and.w	r3, r3, #2
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	4a12      	ldr	r2, [pc, #72]	; (8000738 <BSP_LED_Init+0x98>)
 80006ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80006fc:	2302      	movs	r3, #2
 80006fe:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	4a0e      	ldr	r2, [pc, #56]	; (800073c <BSP_LED_Init+0x9c>)
 8000704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000708:	f107 0214 	add.w	r2, r7, #20
 800070c:	4611      	mov	r1, r2
 800070e:	4618      	mov	r0, r3
 8000710:	f000 fac8 	bl	8000ca4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	4a09      	ldr	r2, [pc, #36]	; (800073c <BSP_LED_Init+0x9c>)
 8000718:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	4a06      	ldr	r2, [pc, #24]	; (8000738 <BSP_LED_Init+0x98>)
 8000720:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000724:	2200      	movs	r2, #0
 8000726:	4619      	mov	r1, r3
 8000728:	f000 fc68 	bl	8000ffc <HAL_GPIO_WritePin>
}
 800072c:	bf00      	nop
 800072e:	3728      	adds	r7, #40	; 0x28
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40023800 	.word	0x40023800
 8000738:	08003534 	.word	0x08003534
 800073c:	20000000 	.word	0x20000000

08000740 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	4a07      	ldr	r2, [pc, #28]	; (800076c <BSP_LED_On+0x2c>)
 800074e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	4a06      	ldr	r2, [pc, #24]	; (8000770 <BSP_LED_On+0x30>)
 8000756:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800075a:	2201      	movs	r2, #1
 800075c:	4619      	mov	r1, r3
 800075e:	f000 fc4d 	bl	8000ffc <HAL_GPIO_WritePin>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000000 	.word	0x20000000
 8000770:	08003534 	.word	0x08003534

08000774 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <BSP_LED_Toggle+0x2c>)
 8000782:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	4906      	ldr	r1, [pc, #24]	; (80007a4 <BSP_LED_Toggle+0x30>)
 800078a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800078e:	4619      	mov	r1, r3
 8000790:	4610      	mov	r0, r2
 8000792:	f000 fc4c 	bl	800102e <HAL_GPIO_TogglePin>
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000000 	.word	0x20000000
 80007a4:	08003534 	.word	0x08003534

080007a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007ac:	4b16      	ldr	r3, [pc, #88]	; (8000808 <SystemInit+0x60>)
 80007ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007b2:	4a15      	ldr	r2, [pc, #84]	; (8000808 <SystemInit+0x60>)
 80007b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80007bc:	4b13      	ldr	r3, [pc, #76]	; (800080c <SystemInit+0x64>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a12      	ldr	r2, [pc, #72]	; (800080c <SystemInit+0x64>)
 80007c2:	f043 0301 	orr.w	r3, r3, #1
 80007c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007c8:	4b10      	ldr	r3, [pc, #64]	; (800080c <SystemInit+0x64>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <SystemInit+0x64>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a0e      	ldr	r2, [pc, #56]	; (800080c <SystemInit+0x64>)
 80007d4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80007d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007dc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <SystemInit+0x64>)
 80007e0:	4a0b      	ldr	r2, [pc, #44]	; (8000810 <SystemInit+0x68>)
 80007e2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <SystemInit+0x64>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a08      	ldr	r2, [pc, #32]	; (800080c <SystemInit+0x64>)
 80007ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <SystemInit+0x64>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007f6:	4b04      	ldr	r3, [pc, #16]	; (8000808 <SystemInit+0x60>)
 80007f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007fc:	609a      	str	r2, [r3, #8]
#endif
}
 80007fe:	bf00      	nop
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	e000ed00 	.word	0xe000ed00
 800080c:	40023800 	.word	0x40023800
 8000810:	24003010 	.word	0x24003010

08000814 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000826:	e7fe      	b.n	8000826 <HardFault_Handler+0x4>

08000828 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800082c:	e7fe      	b.n	800082c <MemManage_Handler+0x4>

0800082e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000832:	e7fe      	b.n	8000832 <BusFault_Handler+0x4>

08000834 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000838:	e7fe      	b.n	8000838 <UsageFault_Handler+0x4>

0800083a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000868:	f000 f8f2 	bl	8000a50 <HAL_IncTick>
}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}

08000870 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	e00a      	b.n	8000898 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000882:	f3af 8000 	nop.w
 8000886:	4601      	mov	r1, r0
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	1c5a      	adds	r2, r3, #1
 800088c:	60ba      	str	r2, [r7, #8]
 800088e:	b2ca      	uxtb	r2, r1
 8000890:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	3301      	adds	r3, #1
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	697a      	ldr	r2, [r7, #20]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	429a      	cmp	r2, r3
 800089e:	dbf0      	blt.n	8000882 <_read+0x12>
	}

return len;
 80008a0:	687b      	ldr	r3, [r7, #4]
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3718      	adds	r7, #24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b086      	sub	sp, #24
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	60f8      	str	r0, [r7, #12]
 80008b2:	60b9      	str	r1, [r7, #8]
 80008b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
 80008ba:	e009      	b.n	80008d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	1c5a      	adds	r2, r3, #1
 80008c0:	60ba      	str	r2, [r7, #8]
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff fed9 	bl	800067c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	3301      	adds	r3, #1
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	697a      	ldr	r2, [r7, #20]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	dbf1      	blt.n	80008bc <_write+0x12>
	}
	return len;
 80008d8:	687b      	ldr	r3, [r7, #4]
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3718      	adds	r7, #24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <_close>:

int _close(int file)
{
 80008e2:	b480      	push	{r7}
 80008e4:	b083      	sub	sp, #12
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
	return -1;
 80008ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008fa:	b480      	push	{r7}
 80008fc:	b083      	sub	sp, #12
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
 8000902:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800090a:	605a      	str	r2, [r3, #4]
	return 0;
 800090c:	2300      	movs	r3, #0
}
 800090e:	4618      	mov	r0, r3
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <_isatty>:

int _isatty(int file)
{
 800091a:	b480      	push	{r7}
 800091c:	b083      	sub	sp, #12
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
	return 1;
 8000922:	2301      	movs	r3, #1
}
 8000924:	4618      	mov	r0, r3
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
	return 0;
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	3714      	adds	r7, #20
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
	...

0800094c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000954:	4a14      	ldr	r2, [pc, #80]	; (80009a8 <_sbrk+0x5c>)
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <_sbrk+0x60>)
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000960:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <_sbrk+0x64>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d102      	bne.n	800096e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <_sbrk+0x64>)
 800096a:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <_sbrk+0x68>)
 800096c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <_sbrk+0x64>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4413      	add	r3, r2
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	429a      	cmp	r2, r3
 800097a:	d207      	bcs.n	800098c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800097c:	f001 fdf2 	bl	8002564 <__errno>
 8000980:	4603      	mov	r3, r0
 8000982:	220c      	movs	r2, #12
 8000984:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800098a:	e009      	b.n	80009a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <_sbrk+0x64>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000992:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <_sbrk+0x64>)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4413      	add	r3, r2
 800099a:	4a05      	ldr	r2, [pc, #20]	; (80009b0 <_sbrk+0x64>)
 800099c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800099e:	68fb      	ldr	r3, [r7, #12]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3718      	adds	r7, #24
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20030000 	.word	0x20030000
 80009ac:	00000400 	.word	0x00000400
 80009b0:	200000dc 	.word	0x200000dc
 80009b4:	200000f8 	.word	0x200000f8

080009b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009bc:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <HAL_Init+0x34>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <HAL_Init+0x34>)
 80009c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009c6:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <HAL_Init+0x34>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a07      	ldr	r2, [pc, #28]	; (80009ec <HAL_Init+0x34>)
 80009ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d4:	2003      	movs	r0, #3
 80009d6:	f000 f931 	bl	8000c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009da:	200f      	movs	r0, #15
 80009dc:	f000 f808 	bl	80009f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e0:	f000 fb92 	bl	8001108 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023c00 	.word	0x40023c00

080009f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <HAL_InitTick+0x54>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <HAL_InitTick+0x58>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	4619      	mov	r1, r3
 8000a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 f93b 	bl	8000c8a <HAL_SYSTICK_Config>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e00e      	b.n	8000a3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2b0f      	cmp	r3, #15
 8000a22:	d80a      	bhi.n	8000a3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a24:	2200      	movs	r2, #0
 8000a26:	6879      	ldr	r1, [r7, #4]
 8000a28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a2c:	f000 f911 	bl	8000c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a30:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <HAL_InitTick+0x5c>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a36:	2300      	movs	r3, #0
 8000a38:	e000      	b.n	8000a3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	2000000c 	.word	0x2000000c
 8000a48:	20000014 	.word	0x20000014
 8000a4c:	20000010 	.word	0x20000010

08000a50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_IncTick+0x20>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_IncTick+0x24>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4413      	add	r3, r2
 8000a60:	4a04      	ldr	r2, [pc, #16]	; (8000a74 <HAL_IncTick+0x24>)
 8000a62:	6013      	str	r3, [r2, #0]
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20000014 	.word	0x20000014
 8000a74:	200000e0 	.word	0x200000e0

08000a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a7c:	4b03      	ldr	r3, [pc, #12]	; (8000a8c <HAL_GetTick+0x14>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	200000e0 	.word	0x200000e0

08000a90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a98:	f7ff ffee 	bl	8000a78 <HAL_GetTick>
 8000a9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000aa8:	d005      	beq.n	8000ab6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <HAL_Delay+0x44>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ab6:	bf00      	nop
 8000ab8:	f7ff ffde 	bl	8000a78 <HAL_GetTick>
 8000abc:	4602      	mov	r2, r0
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	68fa      	ldr	r2, [r7, #12]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d8f7      	bhi.n	8000ab8 <HAL_Delay+0x28>
  {
  }
}
 8000ac8:	bf00      	nop
 8000aca:	bf00      	nop
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000014 	.word	0x20000014

08000ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <__NVIC_SetPriorityGrouping+0x44>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aee:	68ba      	ldr	r2, [r7, #8]
 8000af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af4:	4013      	ands	r3, r2
 8000af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b0a:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <__NVIC_SetPriorityGrouping+0x44>)
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	60d3      	str	r3, [r2, #12]
}
 8000b10:	bf00      	nop
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b24:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <__NVIC_GetPriorityGrouping+0x18>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	0a1b      	lsrs	r3, r3, #8
 8000b2a:	f003 0307 	and.w	r3, r3, #7
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	6039      	str	r1, [r7, #0]
 8000b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	db0a      	blt.n	8000b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	490c      	ldr	r1, [pc, #48]	; (8000b88 <__NVIC_SetPriority+0x4c>)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	0112      	lsls	r2, r2, #4
 8000b5c:	b2d2      	uxtb	r2, r2
 8000b5e:	440b      	add	r3, r1
 8000b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b64:	e00a      	b.n	8000b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4908      	ldr	r1, [pc, #32]	; (8000b8c <__NVIC_SetPriority+0x50>)
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	f003 030f 	and.w	r3, r3, #15
 8000b72:	3b04      	subs	r3, #4
 8000b74:	0112      	lsls	r2, r2, #4
 8000b76:	b2d2      	uxtb	r2, r2
 8000b78:	440b      	add	r3, r1
 8000b7a:	761a      	strb	r2, [r3, #24]
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000e100 	.word	0xe000e100
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b089      	sub	sp, #36	; 0x24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	f1c3 0307 	rsb	r3, r3, #7
 8000baa:	2b04      	cmp	r3, #4
 8000bac:	bf28      	it	cs
 8000bae:	2304      	movcs	r3, #4
 8000bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	2b06      	cmp	r3, #6
 8000bb8:	d902      	bls.n	8000bc0 <NVIC_EncodePriority+0x30>
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3b03      	subs	r3, #3
 8000bbe:	e000      	b.n	8000bc2 <NVIC_EncodePriority+0x32>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	43da      	mvns	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	fa01 f303 	lsl.w	r3, r1, r3
 8000be2:	43d9      	mvns	r1, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	4313      	orrs	r3, r2
         );
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3724      	adds	r7, #36	; 0x24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
	...

08000bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c08:	d301      	bcc.n	8000c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e00f      	b.n	8000c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <SysTick_Config+0x40>)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c16:	210f      	movs	r1, #15
 8000c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c1c:	f7ff ff8e 	bl	8000b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <SysTick_Config+0x40>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c26:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <SysTick_Config+0x40>)
 8000c28:	2207      	movs	r2, #7
 8000c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	e000e010 	.word	0xe000e010

08000c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff ff47 	bl	8000ad8 <__NVIC_SetPriorityGrouping>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b086      	sub	sp, #24
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	4603      	mov	r3, r0
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
 8000c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c64:	f7ff ff5c 	bl	8000b20 <__NVIC_GetPriorityGrouping>
 8000c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	68b9      	ldr	r1, [r7, #8]
 8000c6e:	6978      	ldr	r0, [r7, #20]
 8000c70:	f7ff ff8e 	bl	8000b90 <NVIC_EncodePriority>
 8000c74:	4602      	mov	r2, r0
 8000c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff5d 	bl	8000b3c <__NVIC_SetPriority>
}
 8000c82:	bf00      	nop
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff ffb0 	bl	8000bf8 <SysTick_Config>
 8000c98:	4603      	mov	r3, r0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b089      	sub	sp, #36	; 0x24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
 8000cbe:	e177      	b.n	8000fb0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	697a      	ldr	r2, [r7, #20]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	f040 8166 	bne.w	8000faa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f003 0303 	and.w	r3, r3, #3
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d005      	beq.n	8000cf6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d130      	bne.n	8000d58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	2203      	movs	r2, #3
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43db      	mvns	r3, r3
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	68da      	ldr	r2, [r3, #12]
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	091b      	lsrs	r3, r3, #4
 8000d42:	f003 0201 	and.w	r2, r3, #1
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 0303 	and.w	r3, r3, #3
 8000d60:	2b03      	cmp	r3, #3
 8000d62:	d017      	beq.n	8000d94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	2203      	movs	r2, #3
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	689a      	ldr	r2, [r3, #8]
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f003 0303 	and.w	r3, r3, #3
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d123      	bne.n	8000de8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	08da      	lsrs	r2, r3, #3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3208      	adds	r2, #8
 8000da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	f003 0307 	and.w	r3, r3, #7
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	220f      	movs	r2, #15
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	691a      	ldr	r2, [r3, #16]
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	08da      	lsrs	r2, r3, #3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	3208      	adds	r2, #8
 8000de2:	69b9      	ldr	r1, [r7, #24]
 8000de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	2203      	movs	r2, #3
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 0203 	and.w	r2, r3, #3
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	f000 80c0 	beq.w	8000faa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b66      	ldr	r3, [pc, #408]	; (8000fc8 <HAL_GPIO_Init+0x324>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	4a65      	ldr	r2, [pc, #404]	; (8000fc8 <HAL_GPIO_Init+0x324>)
 8000e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e38:	6453      	str	r3, [r2, #68]	; 0x44
 8000e3a:	4b63      	ldr	r3, [pc, #396]	; (8000fc8 <HAL_GPIO_Init+0x324>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e46:	4a61      	ldr	r2, [pc, #388]	; (8000fcc <HAL_GPIO_Init+0x328>)
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	089b      	lsrs	r3, r3, #2
 8000e4c:	3302      	adds	r3, #2
 8000e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f003 0303 	and.w	r3, r3, #3
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	220f      	movs	r2, #15
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4013      	ands	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a58      	ldr	r2, [pc, #352]	; (8000fd0 <HAL_GPIO_Init+0x32c>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d037      	beq.n	8000ee2 <HAL_GPIO_Init+0x23e>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a57      	ldr	r2, [pc, #348]	; (8000fd4 <HAL_GPIO_Init+0x330>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d031      	beq.n	8000ede <HAL_GPIO_Init+0x23a>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a56      	ldr	r2, [pc, #344]	; (8000fd8 <HAL_GPIO_Init+0x334>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d02b      	beq.n	8000eda <HAL_GPIO_Init+0x236>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a55      	ldr	r2, [pc, #340]	; (8000fdc <HAL_GPIO_Init+0x338>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d025      	beq.n	8000ed6 <HAL_GPIO_Init+0x232>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a54      	ldr	r2, [pc, #336]	; (8000fe0 <HAL_GPIO_Init+0x33c>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d01f      	beq.n	8000ed2 <HAL_GPIO_Init+0x22e>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a53      	ldr	r2, [pc, #332]	; (8000fe4 <HAL_GPIO_Init+0x340>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d019      	beq.n	8000ece <HAL_GPIO_Init+0x22a>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a52      	ldr	r2, [pc, #328]	; (8000fe8 <HAL_GPIO_Init+0x344>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d013      	beq.n	8000eca <HAL_GPIO_Init+0x226>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a51      	ldr	r2, [pc, #324]	; (8000fec <HAL_GPIO_Init+0x348>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d00d      	beq.n	8000ec6 <HAL_GPIO_Init+0x222>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a50      	ldr	r2, [pc, #320]	; (8000ff0 <HAL_GPIO_Init+0x34c>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d007      	beq.n	8000ec2 <HAL_GPIO_Init+0x21e>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a4f      	ldr	r2, [pc, #316]	; (8000ff4 <HAL_GPIO_Init+0x350>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d101      	bne.n	8000ebe <HAL_GPIO_Init+0x21a>
 8000eba:	2309      	movs	r3, #9
 8000ebc:	e012      	b.n	8000ee4 <HAL_GPIO_Init+0x240>
 8000ebe:	230a      	movs	r3, #10
 8000ec0:	e010      	b.n	8000ee4 <HAL_GPIO_Init+0x240>
 8000ec2:	2308      	movs	r3, #8
 8000ec4:	e00e      	b.n	8000ee4 <HAL_GPIO_Init+0x240>
 8000ec6:	2307      	movs	r3, #7
 8000ec8:	e00c      	b.n	8000ee4 <HAL_GPIO_Init+0x240>
 8000eca:	2306      	movs	r3, #6
 8000ecc:	e00a      	b.n	8000ee4 <HAL_GPIO_Init+0x240>
 8000ece:	2305      	movs	r3, #5
 8000ed0:	e008      	b.n	8000ee4 <HAL_GPIO_Init+0x240>
 8000ed2:	2304      	movs	r3, #4
 8000ed4:	e006      	b.n	8000ee4 <HAL_GPIO_Init+0x240>
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e004      	b.n	8000ee4 <HAL_GPIO_Init+0x240>
 8000eda:	2302      	movs	r3, #2
 8000edc:	e002      	b.n	8000ee4 <HAL_GPIO_Init+0x240>
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e000      	b.n	8000ee4 <HAL_GPIO_Init+0x240>
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	69fa      	ldr	r2, [r7, #28]
 8000ee6:	f002 0203 	and.w	r2, r2, #3
 8000eea:	0092      	lsls	r2, r2, #2
 8000eec:	4093      	lsls	r3, r2
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ef4:	4935      	ldr	r1, [pc, #212]	; (8000fcc <HAL_GPIO_Init+0x328>)
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	089b      	lsrs	r3, r3, #2
 8000efa:	3302      	adds	r3, #2
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f02:	4b3d      	ldr	r3, [pc, #244]	; (8000ff8 <HAL_GPIO_Init+0x354>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f26:	4a34      	ldr	r2, [pc, #208]	; (8000ff8 <HAL_GPIO_Init+0x354>)
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f2c:	4b32      	ldr	r3, [pc, #200]	; (8000ff8 <HAL_GPIO_Init+0x354>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f50:	4a29      	ldr	r2, [pc, #164]	; (8000ff8 <HAL_GPIO_Init+0x354>)
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f56:	4b28      	ldr	r3, [pc, #160]	; (8000ff8 <HAL_GPIO_Init+0x354>)
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f7a:	4a1f      	ldr	r2, [pc, #124]	; (8000ff8 <HAL_GPIO_Init+0x354>)
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f80:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <HAL_GPIO_Init+0x354>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fa4:	4a14      	ldr	r2, [pc, #80]	; (8000ff8 <HAL_GPIO_Init+0x354>)
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3301      	adds	r3, #1
 8000fae:	61fb      	str	r3, [r7, #28]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	2b0f      	cmp	r3, #15
 8000fb4:	f67f ae84 	bls.w	8000cc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fb8:	bf00      	nop
 8000fba:	bf00      	nop
 8000fbc:	3724      	adds	r7, #36	; 0x24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40013800 	.word	0x40013800
 8000fd0:	40020000 	.word	0x40020000
 8000fd4:	40020400 	.word	0x40020400
 8000fd8:	40020800 	.word	0x40020800
 8000fdc:	40020c00 	.word	0x40020c00
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	40021400 	.word	0x40021400
 8000fe8:	40021800 	.word	0x40021800
 8000fec:	40021c00 	.word	0x40021c00
 8000ff0:	40022000 	.word	0x40022000
 8000ff4:	40022400 	.word	0x40022400
 8000ff8:	40013c00 	.word	0x40013c00

08000ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	807b      	strh	r3, [r7, #2]
 8001008:	4613      	mov	r3, r2
 800100a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800100c:	787b      	ldrb	r3, [r7, #1]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001012:	887a      	ldrh	r2, [r7, #2]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001018:	e003      	b.n	8001022 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800101a:	887b      	ldrh	r3, [r7, #2]
 800101c:	041a      	lsls	r2, r3, #16
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	619a      	str	r2, [r3, #24]
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800102e:	b480      	push	{r7}
 8001030:	b085      	sub	sp, #20
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	460b      	mov	r3, r1
 8001038:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001040:	887a      	ldrh	r2, [r7, #2]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	4013      	ands	r3, r2
 8001046:	041a      	lsls	r2, r3, #16
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	43d9      	mvns	r1, r3
 800104c:	887b      	ldrh	r3, [r7, #2]
 800104e:	400b      	ands	r3, r1
 8001050:	431a      	orrs	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	619a      	str	r2, [r3, #24]
}
 8001056:	bf00      	nop
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 800106c:	2300      	movs	r3, #0
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	4b23      	ldr	r3, [pc, #140]	; (8001100 <HAL_UART_MspInit+0x9c>)
 8001072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001074:	4a22      	ldr	r2, [pc, #136]	; (8001100 <HAL_UART_MspInit+0x9c>)
 8001076:	f043 0308 	orr.w	r3, r3, #8
 800107a:	6313      	str	r3, [r2, #48]	; 0x30
 800107c:	4b20      	ldr	r3, [pc, #128]	; (8001100 <HAL_UART_MspInit+0x9c>)
 800107e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001080:	f003 0308 	and.w	r3, r3, #8
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <HAL_UART_MspInit+0x9c>)
 800108e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001090:	4a1b      	ldr	r2, [pc, #108]	; (8001100 <HAL_UART_MspInit+0x9c>)
 8001092:	f043 0308 	orr.w	r3, r3, #8
 8001096:	6313      	str	r3, [r2, #48]	; 0x30
 8001098:	4b19      	ldr	r3, [pc, #100]	; (8001100 <HAL_UART_MspInit+0x9c>)
 800109a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109c:	f003 0308 	and.w	r3, r3, #8
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	4b15      	ldr	r3, [pc, #84]	; (8001100 <HAL_UART_MspInit+0x9c>)
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	4a14      	ldr	r2, [pc, #80]	; (8001100 <HAL_UART_MspInit+0x9c>)
 80010ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b2:	6413      	str	r3, [r2, #64]	; 0x40
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_UART_MspInit+0x9c>)
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80010c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80010ca:	2301      	movs	r3, #1
 80010cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ce:	2303      	movs	r3, #3
 80010d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80010d2:	2307      	movs	r3, #7
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4619      	mov	r1, r3
 80010dc:	4809      	ldr	r0, [pc, #36]	; (8001104 <HAL_UART_MspInit+0xa0>)
 80010de:	f7ff fde1 	bl	8000ca4 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80010e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80010e8:	2307      	movs	r3, #7
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	4619      	mov	r1, r3
 80010f2:	4804      	ldr	r0, [pc, #16]	; (8001104 <HAL_UART_MspInit+0xa0>)
 80010f4:	f7ff fdd6 	bl	8000ca4 <HAL_GPIO_Init>
}
 80010f8:	bf00      	nop
 80010fa:	3728      	adds	r7, #40	; 0x28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40023800 	.word	0x40023800
 8001104:	40020c00 	.word	0x40020c00

08001108 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0

}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
	...

08001118 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	603b      	str	r3, [r7, #0]
 8001126:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	4a1f      	ldr	r2, [pc, #124]	; (80011a8 <HAL_PWREx_EnableOverDrive+0x90>)
 800112c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001130:	6413      	str	r3, [r2, #64]	; 0x40
 8001132:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800113e:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <HAL_PWREx_EnableOverDrive+0x94>)
 8001140:	2201      	movs	r2, #1
 8001142:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001144:	f7ff fc98 	bl	8000a78 <HAL_GetTick>
 8001148:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800114a:	e009      	b.n	8001160 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800114c:	f7ff fc94 	bl	8000a78 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800115a:	d901      	bls.n	8001160 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e01f      	b.n	80011a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001160:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800116c:	d1ee      	bne.n	800114c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001170:	2201      	movs	r2, #1
 8001172:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001174:	f7ff fc80 	bl	8000a78 <HAL_GetTick>
 8001178:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800117a:	e009      	b.n	8001190 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800117c:	f7ff fc7c 	bl	8000a78 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800118a:	d901      	bls.n	8001190 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800118c:	2303      	movs	r3, #3
 800118e:	e007      	b.n	80011a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001198:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800119c:	d1ee      	bne.n	800117c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40023800 	.word	0x40023800
 80011ac:	420e0040 	.word	0x420e0040
 80011b0:	40007000 	.word	0x40007000
 80011b4:	420e0044 	.word	0x420e0044

080011b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e267      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d075      	beq.n	80012c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011d6:	4b88      	ldr	r3, [pc, #544]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f003 030c 	and.w	r3, r3, #12
 80011de:	2b04      	cmp	r3, #4
 80011e0:	d00c      	beq.n	80011fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011e2:	4b85      	ldr	r3, [pc, #532]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011ea:	2b08      	cmp	r3, #8
 80011ec:	d112      	bne.n	8001214 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ee:	4b82      	ldr	r3, [pc, #520]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011fa:	d10b      	bne.n	8001214 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011fc:	4b7e      	ldr	r3, [pc, #504]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d05b      	beq.n	80012c0 <HAL_RCC_OscConfig+0x108>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d157      	bne.n	80012c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e242      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800121c:	d106      	bne.n	800122c <HAL_RCC_OscConfig+0x74>
 800121e:	4b76      	ldr	r3, [pc, #472]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a75      	ldr	r2, [pc, #468]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	e01d      	b.n	8001268 <HAL_RCC_OscConfig+0xb0>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001234:	d10c      	bne.n	8001250 <HAL_RCC_OscConfig+0x98>
 8001236:	4b70      	ldr	r3, [pc, #448]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a6f      	ldr	r2, [pc, #444]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 800123c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	4b6d      	ldr	r3, [pc, #436]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a6c      	ldr	r2, [pc, #432]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	e00b      	b.n	8001268 <HAL_RCC_OscConfig+0xb0>
 8001250:	4b69      	ldr	r3, [pc, #420]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a68      	ldr	r2, [pc, #416]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800125a:	6013      	str	r3, [r2, #0]
 800125c:	4b66      	ldr	r3, [pc, #408]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a65      	ldr	r2, [pc, #404]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001266:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d013      	beq.n	8001298 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001270:	f7ff fc02 	bl	8000a78 <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001278:	f7ff fbfe 	bl	8000a78 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b64      	cmp	r3, #100	; 0x64
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e207      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128a:	4b5b      	ldr	r3, [pc, #364]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0f0      	beq.n	8001278 <HAL_RCC_OscConfig+0xc0>
 8001296:	e014      	b.n	80012c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001298:	f7ff fbee 	bl	8000a78 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012a0:	f7ff fbea 	bl	8000a78 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b64      	cmp	r3, #100	; 0x64
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e1f3      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b2:	4b51      	ldr	r3, [pc, #324]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1f0      	bne.n	80012a0 <HAL_RCC_OscConfig+0xe8>
 80012be:	e000      	b.n	80012c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d063      	beq.n	8001396 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ce:	4b4a      	ldr	r3, [pc, #296]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 030c 	and.w	r3, r3, #12
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00b      	beq.n	80012f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012da:	4b47      	ldr	r3, [pc, #284]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012e2:	2b08      	cmp	r3, #8
 80012e4:	d11c      	bne.n	8001320 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012e6:	4b44      	ldr	r3, [pc, #272]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d116      	bne.n	8001320 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f2:	4b41      	ldr	r3, [pc, #260]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d005      	beq.n	800130a <HAL_RCC_OscConfig+0x152>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d001      	beq.n	800130a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e1c7      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130a:	4b3b      	ldr	r3, [pc, #236]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	691b      	ldr	r3, [r3, #16]
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	4937      	ldr	r1, [pc, #220]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 800131a:	4313      	orrs	r3, r2
 800131c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800131e:	e03a      	b.n	8001396 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d020      	beq.n	800136a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001328:	4b34      	ldr	r3, [pc, #208]	; (80013fc <HAL_RCC_OscConfig+0x244>)
 800132a:	2201      	movs	r2, #1
 800132c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800132e:	f7ff fba3 	bl	8000a78 <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001336:	f7ff fb9f 	bl	8000a78 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e1a8      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001348:	4b2b      	ldr	r3, [pc, #172]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0f0      	beq.n	8001336 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001354:	4b28      	ldr	r3, [pc, #160]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	4925      	ldr	r1, [pc, #148]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001364:	4313      	orrs	r3, r2
 8001366:	600b      	str	r3, [r1, #0]
 8001368:	e015      	b.n	8001396 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800136a:	4b24      	ldr	r3, [pc, #144]	; (80013fc <HAL_RCC_OscConfig+0x244>)
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001370:	f7ff fb82 	bl	8000a78 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001378:	f7ff fb7e 	bl	8000a78 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e187      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800138a:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f0      	bne.n	8001378 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d036      	beq.n	8001410 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d016      	beq.n	80013d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <HAL_RCC_OscConfig+0x248>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b0:	f7ff fb62 	bl	8000a78 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013b8:	f7ff fb5e 	bl	8000a78 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e167      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 80013cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0f0      	beq.n	80013b8 <HAL_RCC_OscConfig+0x200>
 80013d6:	e01b      	b.n	8001410 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <HAL_RCC_OscConfig+0x248>)
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013de:	f7ff fb4b 	bl	8000a78 <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e4:	e00e      	b.n	8001404 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e6:	f7ff fb47 	bl	8000a78 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d907      	bls.n	8001404 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e150      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
 80013f8:	40023800 	.word	0x40023800
 80013fc:	42470000 	.word	0x42470000
 8001400:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001404:	4b88      	ldr	r3, [pc, #544]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 8001406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1ea      	bne.n	80013e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 8097 	beq.w	800154c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800141e:	2300      	movs	r3, #0
 8001420:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001422:	4b81      	ldr	r3, [pc, #516]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10f      	bne.n	800144e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	4b7d      	ldr	r3, [pc, #500]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	4a7c      	ldr	r2, [pc, #496]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 8001438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800143c:	6413      	str	r3, [r2, #64]	; 0x40
 800143e:	4b7a      	ldr	r3, [pc, #488]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800144a:	2301      	movs	r3, #1
 800144c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144e:	4b77      	ldr	r3, [pc, #476]	; (800162c <HAL_RCC_OscConfig+0x474>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001456:	2b00      	cmp	r3, #0
 8001458:	d118      	bne.n	800148c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800145a:	4b74      	ldr	r3, [pc, #464]	; (800162c <HAL_RCC_OscConfig+0x474>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a73      	ldr	r2, [pc, #460]	; (800162c <HAL_RCC_OscConfig+0x474>)
 8001460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001466:	f7ff fb07 	bl	8000a78 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800146e:	f7ff fb03 	bl	8000a78 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e10c      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001480:	4b6a      	ldr	r3, [pc, #424]	; (800162c <HAL_RCC_OscConfig+0x474>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0f0      	beq.n	800146e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d106      	bne.n	80014a2 <HAL_RCC_OscConfig+0x2ea>
 8001494:	4b64      	ldr	r3, [pc, #400]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 8001496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001498:	4a63      	ldr	r2, [pc, #396]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	6713      	str	r3, [r2, #112]	; 0x70
 80014a0:	e01c      	b.n	80014dc <HAL_RCC_OscConfig+0x324>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2b05      	cmp	r3, #5
 80014a8:	d10c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x30c>
 80014aa:	4b5f      	ldr	r3, [pc, #380]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 80014ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ae:	4a5e      	ldr	r2, [pc, #376]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 80014b0:	f043 0304 	orr.w	r3, r3, #4
 80014b4:	6713      	str	r3, [r2, #112]	; 0x70
 80014b6:	4b5c      	ldr	r3, [pc, #368]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 80014b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ba:	4a5b      	ldr	r2, [pc, #364]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6713      	str	r3, [r2, #112]	; 0x70
 80014c2:	e00b      	b.n	80014dc <HAL_RCC_OscConfig+0x324>
 80014c4:	4b58      	ldr	r3, [pc, #352]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 80014c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c8:	4a57      	ldr	r2, [pc, #348]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 80014ca:	f023 0301 	bic.w	r3, r3, #1
 80014ce:	6713      	str	r3, [r2, #112]	; 0x70
 80014d0:	4b55      	ldr	r3, [pc, #340]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 80014d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d4:	4a54      	ldr	r2, [pc, #336]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 80014d6:	f023 0304 	bic.w	r3, r3, #4
 80014da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d015      	beq.n	8001510 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e4:	f7ff fac8 	bl	8000a78 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ea:	e00a      	b.n	8001502 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ec:	f7ff fac4 	bl	8000a78 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e0cb      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001502:	4b49      	ldr	r3, [pc, #292]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 8001504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0ee      	beq.n	80014ec <HAL_RCC_OscConfig+0x334>
 800150e:	e014      	b.n	800153a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001510:	f7ff fab2 	bl	8000a78 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001516:	e00a      	b.n	800152e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001518:	f7ff faae 	bl	8000a78 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	f241 3288 	movw	r2, #5000	; 0x1388
 8001526:	4293      	cmp	r3, r2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e0b5      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800152e:	4b3e      	ldr	r3, [pc, #248]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 8001530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1ee      	bne.n	8001518 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800153a:	7dfb      	ldrb	r3, [r7, #23]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d105      	bne.n	800154c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001540:	4b39      	ldr	r3, [pc, #228]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	4a38      	ldr	r2, [pc, #224]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 8001546:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800154a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 80a1 	beq.w	8001698 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001556:	4b34      	ldr	r3, [pc, #208]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	2b08      	cmp	r3, #8
 8001560:	d05c      	beq.n	800161c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d141      	bne.n	80015ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800156a:	4b31      	ldr	r3, [pc, #196]	; (8001630 <HAL_RCC_OscConfig+0x478>)
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001570:	f7ff fa82 	bl	8000a78 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001578:	f7ff fa7e 	bl	8000a78 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e087      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800158a:	4b27      	ldr	r3, [pc, #156]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f0      	bne.n	8001578 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69da      	ldr	r2, [r3, #28]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a4:	019b      	lsls	r3, r3, #6
 80015a6:	431a      	orrs	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ac:	085b      	lsrs	r3, r3, #1
 80015ae:	3b01      	subs	r3, #1
 80015b0:	041b      	lsls	r3, r3, #16
 80015b2:	431a      	orrs	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b8:	061b      	lsls	r3, r3, #24
 80015ba:	491b      	ldr	r1, [pc, #108]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015c0:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <HAL_RCC_OscConfig+0x478>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c6:	f7ff fa57 	bl	8000a78 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ce:	f7ff fa53 	bl	8000a78 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e05c      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e0:	4b11      	ldr	r3, [pc, #68]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0f0      	beq.n	80015ce <HAL_RCC_OscConfig+0x416>
 80015ec:	e054      	b.n	8001698 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <HAL_RCC_OscConfig+0x478>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fa40 	bl	8000a78 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015fc:	f7ff fa3c 	bl	8000a78 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e045      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0x444>
 800161a:	e03d      	b.n	8001698 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d107      	bne.n	8001634 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e038      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
 8001628:	40023800 	.word	0x40023800
 800162c:	40007000 	.word	0x40007000
 8001630:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001634:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <HAL_RCC_OscConfig+0x4ec>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d028      	beq.n	8001694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800164c:	429a      	cmp	r2, r3
 800164e:	d121      	bne.n	8001694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800165a:	429a      	cmp	r2, r3
 800165c:	d11a      	bne.n	8001694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001664:	4013      	ands	r3, r2
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800166a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800166c:	4293      	cmp	r3, r2
 800166e:	d111      	bne.n	8001694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167a:	085b      	lsrs	r3, r3, #1
 800167c:	3b01      	subs	r3, #1
 800167e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001680:	429a      	cmp	r2, r3
 8001682:	d107      	bne.n	8001694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001690:	429a      	cmp	r2, r3
 8001692:	d001      	beq.n	8001698 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e000      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800

080016a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e0cc      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016bc:	4b68      	ldr	r3, [pc, #416]	; (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 030f 	and.w	r3, r3, #15
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d90c      	bls.n	80016e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ca:	4b65      	ldr	r3, [pc, #404]	; (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d2:	4b63      	ldr	r3, [pc, #396]	; (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d001      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e0b8      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d020      	beq.n	8001732 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016fc:	4b59      	ldr	r3, [pc, #356]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	4a58      	ldr	r2, [pc, #352]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001706:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0308 	and.w	r3, r3, #8
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001714:	4b53      	ldr	r3, [pc, #332]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	4a52      	ldr	r2, [pc, #328]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800171e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001720:	4b50      	ldr	r3, [pc, #320]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	494d      	ldr	r1, [pc, #308]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	4313      	orrs	r3, r2
 8001730:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d044      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d107      	bne.n	8001756 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001746:	4b47      	ldr	r3, [pc, #284]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d119      	bne.n	8001786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e07f      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d003      	beq.n	8001766 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001762:	2b03      	cmp	r3, #3
 8001764:	d107      	bne.n	8001776 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001766:	4b3f      	ldr	r3, [pc, #252]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d109      	bne.n	8001786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e06f      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001776:	4b3b      	ldr	r3, [pc, #236]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e067      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001786:	4b37      	ldr	r3, [pc, #220]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f023 0203 	bic.w	r2, r3, #3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	4934      	ldr	r1, [pc, #208]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	4313      	orrs	r3, r2
 8001796:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001798:	f7ff f96e 	bl	8000a78 <HAL_GetTick>
 800179c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179e:	e00a      	b.n	80017b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017a0:	f7ff f96a 	bl	8000a78 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e04f      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b6:	4b2b      	ldr	r3, [pc, #172]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 020c 	and.w	r2, r3, #12
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d1eb      	bne.n	80017a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017c8:	4b25      	ldr	r3, [pc, #148]	; (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 030f 	and.w	r3, r3, #15
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d20c      	bcs.n	80017f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d6:	4b22      	ldr	r3, [pc, #136]	; (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017de:	4b20      	ldr	r3, [pc, #128]	; (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 030f 	and.w	r3, r3, #15
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d001      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e032      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d008      	beq.n	800180e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017fc:	4b19      	ldr	r3, [pc, #100]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	4916      	ldr	r1, [pc, #88]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	4313      	orrs	r3, r2
 800180c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0308 	and.w	r3, r3, #8
 8001816:	2b00      	cmp	r3, #0
 8001818:	d009      	beq.n	800182e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800181a:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	490e      	ldr	r1, [pc, #56]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	4313      	orrs	r3, r2
 800182c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800182e:	f000 f821 	bl	8001874 <HAL_RCC_GetSysClockFreq>
 8001832:	4602      	mov	r2, r0
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	091b      	lsrs	r3, r3, #4
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	490a      	ldr	r1, [pc, #40]	; (8001868 <HAL_RCC_ClockConfig+0x1c0>)
 8001840:	5ccb      	ldrb	r3, [r1, r3]
 8001842:	fa22 f303 	lsr.w	r3, r2, r3
 8001846:	4a09      	ldr	r2, [pc, #36]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 8001848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <HAL_RCC_ClockConfig+0x1c8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff f8ce 	bl	80009f0 <HAL_InitTick>

  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40023c00 	.word	0x40023c00
 8001864:	40023800 	.word	0x40023800
 8001868:	0800353c 	.word	0x0800353c
 800186c:	2000000c 	.word	0x2000000c
 8001870:	20000010 	.word	0x20000010

08001874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001878:	b094      	sub	sp, #80	; 0x50
 800187a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	647b      	str	r3, [r7, #68]	; 0x44
 8001880:	2300      	movs	r3, #0
 8001882:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001884:	2300      	movs	r3, #0
 8001886:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001888:	2300      	movs	r3, #0
 800188a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800188c:	4b79      	ldr	r3, [pc, #484]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x200>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 030c 	and.w	r3, r3, #12
 8001894:	2b08      	cmp	r3, #8
 8001896:	d00d      	beq.n	80018b4 <HAL_RCC_GetSysClockFreq+0x40>
 8001898:	2b08      	cmp	r3, #8
 800189a:	f200 80e1 	bhi.w	8001a60 <HAL_RCC_GetSysClockFreq+0x1ec>
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d002      	beq.n	80018a8 <HAL_RCC_GetSysClockFreq+0x34>
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d003      	beq.n	80018ae <HAL_RCC_GetSysClockFreq+0x3a>
 80018a6:	e0db      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018a8:	4b73      	ldr	r3, [pc, #460]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x204>)
 80018aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80018ac:	e0db      	b.n	8001a66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018ae:	4b73      	ldr	r3, [pc, #460]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x208>)
 80018b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018b2:	e0d8      	b.n	8001a66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018b4:	4b6f      	ldr	r3, [pc, #444]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x200>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018be:	4b6d      	ldr	r3, [pc, #436]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x200>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d063      	beq.n	8001992 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ca:	4b6a      	ldr	r3, [pc, #424]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x200>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	099b      	lsrs	r3, r3, #6
 80018d0:	2200      	movs	r2, #0
 80018d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80018d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80018d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018dc:	633b      	str	r3, [r7, #48]	; 0x30
 80018de:	2300      	movs	r3, #0
 80018e0:	637b      	str	r3, [r7, #52]	; 0x34
 80018e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80018e6:	4622      	mov	r2, r4
 80018e8:	462b      	mov	r3, r5
 80018ea:	f04f 0000 	mov.w	r0, #0
 80018ee:	f04f 0100 	mov.w	r1, #0
 80018f2:	0159      	lsls	r1, r3, #5
 80018f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018f8:	0150      	lsls	r0, r2, #5
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4621      	mov	r1, r4
 8001900:	1a51      	subs	r1, r2, r1
 8001902:	6139      	str	r1, [r7, #16]
 8001904:	4629      	mov	r1, r5
 8001906:	eb63 0301 	sbc.w	r3, r3, r1
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	f04f 0300 	mov.w	r3, #0
 8001914:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001918:	4659      	mov	r1, fp
 800191a:	018b      	lsls	r3, r1, #6
 800191c:	4651      	mov	r1, sl
 800191e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001922:	4651      	mov	r1, sl
 8001924:	018a      	lsls	r2, r1, #6
 8001926:	4651      	mov	r1, sl
 8001928:	ebb2 0801 	subs.w	r8, r2, r1
 800192c:	4659      	mov	r1, fp
 800192e:	eb63 0901 	sbc.w	r9, r3, r1
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	f04f 0300 	mov.w	r3, #0
 800193a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800193e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001942:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001946:	4690      	mov	r8, r2
 8001948:	4699      	mov	r9, r3
 800194a:	4623      	mov	r3, r4
 800194c:	eb18 0303 	adds.w	r3, r8, r3
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	462b      	mov	r3, r5
 8001954:	eb49 0303 	adc.w	r3, r9, r3
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	f04f 0300 	mov.w	r3, #0
 8001962:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001966:	4629      	mov	r1, r5
 8001968:	024b      	lsls	r3, r1, #9
 800196a:	4621      	mov	r1, r4
 800196c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001970:	4621      	mov	r1, r4
 8001972:	024a      	lsls	r2, r1, #9
 8001974:	4610      	mov	r0, r2
 8001976:	4619      	mov	r1, r3
 8001978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800197a:	2200      	movs	r2, #0
 800197c:	62bb      	str	r3, [r7, #40]	; 0x28
 800197e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001980:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001984:	f7fe fc84 	bl	8000290 <__aeabi_uldivmod>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4613      	mov	r3, r2
 800198e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001990:	e058      	b.n	8001a44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001992:	4b38      	ldr	r3, [pc, #224]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	099b      	lsrs	r3, r3, #6
 8001998:	2200      	movs	r2, #0
 800199a:	4618      	mov	r0, r3
 800199c:	4611      	mov	r1, r2
 800199e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019a2:	623b      	str	r3, [r7, #32]
 80019a4:	2300      	movs	r3, #0
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
 80019a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019ac:	4642      	mov	r2, r8
 80019ae:	464b      	mov	r3, r9
 80019b0:	f04f 0000 	mov.w	r0, #0
 80019b4:	f04f 0100 	mov.w	r1, #0
 80019b8:	0159      	lsls	r1, r3, #5
 80019ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019be:	0150      	lsls	r0, r2, #5
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4641      	mov	r1, r8
 80019c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80019ca:	4649      	mov	r1, r9
 80019cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	f04f 0300 	mov.w	r3, #0
 80019d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019e4:	ebb2 040a 	subs.w	r4, r2, sl
 80019e8:	eb63 050b 	sbc.w	r5, r3, fp
 80019ec:	f04f 0200 	mov.w	r2, #0
 80019f0:	f04f 0300 	mov.w	r3, #0
 80019f4:	00eb      	lsls	r3, r5, #3
 80019f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019fa:	00e2      	lsls	r2, r4, #3
 80019fc:	4614      	mov	r4, r2
 80019fe:	461d      	mov	r5, r3
 8001a00:	4643      	mov	r3, r8
 8001a02:	18e3      	adds	r3, r4, r3
 8001a04:	603b      	str	r3, [r7, #0]
 8001a06:	464b      	mov	r3, r9
 8001a08:	eb45 0303 	adc.w	r3, r5, r3
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	f04f 0300 	mov.w	r3, #0
 8001a16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a1a:	4629      	mov	r1, r5
 8001a1c:	028b      	lsls	r3, r1, #10
 8001a1e:	4621      	mov	r1, r4
 8001a20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a24:	4621      	mov	r1, r4
 8001a26:	028a      	lsls	r2, r1, #10
 8001a28:	4610      	mov	r0, r2
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a2e:	2200      	movs	r2, #0
 8001a30:	61bb      	str	r3, [r7, #24]
 8001a32:	61fa      	str	r2, [r7, #28]
 8001a34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a38:	f7fe fc2a 	bl	8000290 <__aeabi_uldivmod>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4613      	mov	r3, r2
 8001a42:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	0c1b      	lsrs	r3, r3, #16
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	3301      	adds	r3, #1
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001a54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a5e:	e002      	b.n	8001a66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3750      	adds	r7, #80	; 0x50
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a72:	bf00      	nop
 8001a74:	40023800 	.word	0x40023800
 8001a78:	00f42400 	.word	0x00f42400
 8001a7c:	007a1200 	.word	0x007a1200

08001a80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	2000000c 	.word	0x2000000c

08001a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a9c:	f7ff fff0 	bl	8001a80 <HAL_RCC_GetHCLKFreq>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	0a9b      	lsrs	r3, r3, #10
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	4903      	ldr	r1, [pc, #12]	; (8001abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aae:	5ccb      	ldrb	r3, [r1, r3]
 8001ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	0800354c 	.word	0x0800354c

08001ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ac4:	f7ff ffdc 	bl	8001a80 <HAL_RCC_GetHCLKFreq>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	0b5b      	lsrs	r3, r3, #13
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	4903      	ldr	r1, [pc, #12]	; (8001ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ad6:	5ccb      	ldrb	r3, [r1, r3]
 8001ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	0800354c 	.word	0x0800354c

08001ae8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e03f      	b.n	8001b7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d106      	bne.n	8001b14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff faa8 	bl	8001064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2224      	movs	r2, #36	; 0x24
 8001b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68da      	ldr	r2, [r3, #12]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 f9cb 	bl	8001ec8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	691a      	ldr	r2, [r3, #16]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	695a      	ldr	r2, [r3, #20]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2220      	movs	r2, #32
 8001b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b08a      	sub	sp, #40	; 0x28
 8001b86:	af02      	add	r7, sp, #8
 8001b88:	60f8      	str	r0, [r7, #12]
 8001b8a:	60b9      	str	r1, [r7, #8]
 8001b8c:	603b      	str	r3, [r7, #0]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b20      	cmp	r3, #32
 8001ba0:	d17c      	bne.n	8001c9c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <HAL_UART_Transmit+0x2c>
 8001ba8:	88fb      	ldrh	r3, [r7, #6]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e075      	b.n	8001c9e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d101      	bne.n	8001bc0 <HAL_UART_Transmit+0x3e>
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	e06e      	b.n	8001c9e <HAL_UART_Transmit+0x11c>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2221      	movs	r2, #33	; 0x21
 8001bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bd6:	f7fe ff4f 	bl	8000a78 <HAL_GetTick>
 8001bda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	88fa      	ldrh	r2, [r7, #6]
 8001be0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	88fa      	ldrh	r2, [r7, #6]
 8001be6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bf0:	d108      	bne.n	8001c04 <HAL_UART_Transmit+0x82>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d104      	bne.n	8001c04 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	61bb      	str	r3, [r7, #24]
 8001c02:	e003      	b.n	8001c0c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001c14:	e02a      	b.n	8001c6c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2180      	movs	r1, #128	; 0x80
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	f000 f8e2 	bl	8001dea <UART_WaitOnFlagUntilTimeout>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e036      	b.n	8001c9e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10b      	bne.n	8001c4e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	3302      	adds	r3, #2
 8001c4a:	61bb      	str	r3, [r7, #24]
 8001c4c:	e007      	b.n	8001c5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	781a      	ldrb	r2, [r3, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	3b01      	subs	r3, #1
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1cf      	bne.n	8001c16 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2140      	movs	r1, #64	; 0x40
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f000 f8b2 	bl	8001dea <UART_WaitOnFlagUntilTimeout>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e006      	b.n	8001c9e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2220      	movs	r2, #32
 8001c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	e000      	b.n	8001c9e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001c9c:	2302      	movs	r3, #2
  }
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3720      	adds	r7, #32
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b08a      	sub	sp, #40	; 0x28
 8001caa:	af02      	add	r7, sp, #8
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	603b      	str	r3, [r7, #0]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b20      	cmp	r3, #32
 8001cc4:	f040 808c 	bne.w	8001de0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d002      	beq.n	8001cd4 <HAL_UART_Receive+0x2e>
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e084      	b.n	8001de2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d101      	bne.n	8001ce6 <HAL_UART_Receive+0x40>
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	e07d      	b.n	8001de2 <HAL_UART_Receive+0x13c>
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2222      	movs	r2, #34	; 0x22
 8001cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d02:	f7fe feb9 	bl	8000a78 <HAL_GetTick>
 8001d06:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	88fa      	ldrh	r2, [r7, #6]
 8001d0c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	88fa      	ldrh	r2, [r7, #6]
 8001d12:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d1c:	d108      	bne.n	8001d30 <HAL_UART_Receive+0x8a>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d104      	bne.n	8001d30 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	61bb      	str	r3, [r7, #24]
 8001d2e:	e003      	b.n	8001d38 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001d40:	e043      	b.n	8001dca <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2120      	movs	r1, #32
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 f84c 	bl	8001dea <UART_WaitOnFlagUntilTimeout>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e042      	b.n	8001de2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10c      	bne.n	8001d7c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	3302      	adds	r3, #2
 8001d78:	61bb      	str	r3, [r7, #24]
 8001d7a:	e01f      	b.n	8001dbc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d84:	d007      	beq.n	8001d96 <HAL_UART_Receive+0xf0>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10a      	bne.n	8001da4 <HAL_UART_Receive+0xfe>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d106      	bne.n	8001da4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	701a      	strb	r2, [r3, #0]
 8001da2:	e008      	b.n	8001db6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3301      	adds	r3, #1
 8001dba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1b6      	bne.n	8001d42 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	e000      	b.n	8001de2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001de0:	2302      	movs	r3, #2
  }
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3720      	adds	r7, #32
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b090      	sub	sp, #64	; 0x40
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	60f8      	str	r0, [r7, #12]
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	603b      	str	r3, [r7, #0]
 8001df6:	4613      	mov	r3, r2
 8001df8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dfa:	e050      	b.n	8001e9e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e02:	d04c      	beq.n	8001e9e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d007      	beq.n	8001e1a <UART_WaitOnFlagUntilTimeout+0x30>
 8001e0a:	f7fe fe35 	bl	8000a78 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d241      	bcs.n	8001e9e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	330c      	adds	r3, #12
 8001e20:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e24:	e853 3f00 	ldrex	r3, [r3]
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001e30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	330c      	adds	r3, #12
 8001e38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e3a:	637a      	str	r2, [r7, #52]	; 0x34
 8001e3c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e42:	e841 2300 	strex	r3, r2, [r1]
 8001e46:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1e5      	bne.n	8001e1a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	3314      	adds	r3, #20
 8001e54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	e853 3f00 	ldrex	r3, [r3]
 8001e5c:	613b      	str	r3, [r7, #16]
   return(result);
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	f023 0301 	bic.w	r3, r3, #1
 8001e64:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	3314      	adds	r3, #20
 8001e6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e6e:	623a      	str	r2, [r7, #32]
 8001e70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e72:	69f9      	ldr	r1, [r7, #28]
 8001e74:	6a3a      	ldr	r2, [r7, #32]
 8001e76:	e841 2300 	strex	r3, r2, [r1]
 8001e7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1e5      	bne.n	8001e4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2220      	movs	r2, #32
 8001e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2220      	movs	r2, #32
 8001e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e00f      	b.n	8001ebe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	68ba      	ldr	r2, [r7, #8]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	bf0c      	ite	eq
 8001eae:	2301      	moveq	r3, #1
 8001eb0:	2300      	movne	r3, #0
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d09f      	beq.n	8001dfc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3740      	adds	r7, #64	; 0x40
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ecc:	b0c0      	sub	sp, #256	; 0x100
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ee4:	68d9      	ldr	r1, [r3, #12]
 8001ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	ea40 0301 	orr.w	r3, r0, r1
 8001ef0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	431a      	orrs	r2, r3
 8001f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	431a      	orrs	r2, r3
 8001f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001f20:	f021 010c 	bic.w	r1, r1, #12
 8001f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001f2e:	430b      	orrs	r3, r1
 8001f30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f42:	6999      	ldr	r1, [r3, #24]
 8001f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	ea40 0301 	orr.w	r3, r0, r1
 8001f4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	4b8f      	ldr	r3, [pc, #572]	; (8002194 <UART_SetConfig+0x2cc>)
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d005      	beq.n	8001f68 <UART_SetConfig+0xa0>
 8001f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	4b8d      	ldr	r3, [pc, #564]	; (8002198 <UART_SetConfig+0x2d0>)
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d104      	bne.n	8001f72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f68:	f7ff fdaa 	bl	8001ac0 <HAL_RCC_GetPCLK2Freq>
 8001f6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001f70:	e003      	b.n	8001f7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001f72:	f7ff fd91 	bl	8001a98 <HAL_RCC_GetPCLK1Freq>
 8001f76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f84:	f040 810c 	bne.w	80021a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001f92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001f96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001f9a:	4622      	mov	r2, r4
 8001f9c:	462b      	mov	r3, r5
 8001f9e:	1891      	adds	r1, r2, r2
 8001fa0:	65b9      	str	r1, [r7, #88]	; 0x58
 8001fa2:	415b      	adcs	r3, r3
 8001fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fa6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001faa:	4621      	mov	r1, r4
 8001fac:	eb12 0801 	adds.w	r8, r2, r1
 8001fb0:	4629      	mov	r1, r5
 8001fb2:	eb43 0901 	adc.w	r9, r3, r1
 8001fb6:	f04f 0200 	mov.w	r2, #0
 8001fba:	f04f 0300 	mov.w	r3, #0
 8001fbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fca:	4690      	mov	r8, r2
 8001fcc:	4699      	mov	r9, r3
 8001fce:	4623      	mov	r3, r4
 8001fd0:	eb18 0303 	adds.w	r3, r8, r3
 8001fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001fd8:	462b      	mov	r3, r5
 8001fda:	eb49 0303 	adc.w	r3, r9, r3
 8001fde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001fee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001ff2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	18db      	adds	r3, r3, r3
 8001ffa:	653b      	str	r3, [r7, #80]	; 0x50
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	eb42 0303 	adc.w	r3, r2, r3
 8002002:	657b      	str	r3, [r7, #84]	; 0x54
 8002004:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002008:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800200c:	f7fe f940 	bl	8000290 <__aeabi_uldivmod>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	4b61      	ldr	r3, [pc, #388]	; (800219c <UART_SetConfig+0x2d4>)
 8002016:	fba3 2302 	umull	r2, r3, r3, r2
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	011c      	lsls	r4, r3, #4
 800201e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002022:	2200      	movs	r2, #0
 8002024:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002028:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800202c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002030:	4642      	mov	r2, r8
 8002032:	464b      	mov	r3, r9
 8002034:	1891      	adds	r1, r2, r2
 8002036:	64b9      	str	r1, [r7, #72]	; 0x48
 8002038:	415b      	adcs	r3, r3
 800203a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800203c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002040:	4641      	mov	r1, r8
 8002042:	eb12 0a01 	adds.w	sl, r2, r1
 8002046:	4649      	mov	r1, r9
 8002048:	eb43 0b01 	adc.w	fp, r3, r1
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002058:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800205c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002060:	4692      	mov	sl, r2
 8002062:	469b      	mov	fp, r3
 8002064:	4643      	mov	r3, r8
 8002066:	eb1a 0303 	adds.w	r3, sl, r3
 800206a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800206e:	464b      	mov	r3, r9
 8002070:	eb4b 0303 	adc.w	r3, fp, r3
 8002074:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002084:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002088:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800208c:	460b      	mov	r3, r1
 800208e:	18db      	adds	r3, r3, r3
 8002090:	643b      	str	r3, [r7, #64]	; 0x40
 8002092:	4613      	mov	r3, r2
 8002094:	eb42 0303 	adc.w	r3, r2, r3
 8002098:	647b      	str	r3, [r7, #68]	; 0x44
 800209a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800209e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80020a2:	f7fe f8f5 	bl	8000290 <__aeabi_uldivmod>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4611      	mov	r1, r2
 80020ac:	4b3b      	ldr	r3, [pc, #236]	; (800219c <UART_SetConfig+0x2d4>)
 80020ae:	fba3 2301 	umull	r2, r3, r3, r1
 80020b2:	095b      	lsrs	r3, r3, #5
 80020b4:	2264      	movs	r2, #100	; 0x64
 80020b6:	fb02 f303 	mul.w	r3, r2, r3
 80020ba:	1acb      	subs	r3, r1, r3
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80020c2:	4b36      	ldr	r3, [pc, #216]	; (800219c <UART_SetConfig+0x2d4>)
 80020c4:	fba3 2302 	umull	r2, r3, r3, r2
 80020c8:	095b      	lsrs	r3, r3, #5
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80020d0:	441c      	add	r4, r3
 80020d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020d6:	2200      	movs	r2, #0
 80020d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80020dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80020e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80020e4:	4642      	mov	r2, r8
 80020e6:	464b      	mov	r3, r9
 80020e8:	1891      	adds	r1, r2, r2
 80020ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80020ec:	415b      	adcs	r3, r3
 80020ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80020f4:	4641      	mov	r1, r8
 80020f6:	1851      	adds	r1, r2, r1
 80020f8:	6339      	str	r1, [r7, #48]	; 0x30
 80020fa:	4649      	mov	r1, r9
 80020fc:	414b      	adcs	r3, r1
 80020fe:	637b      	str	r3, [r7, #52]	; 0x34
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800210c:	4659      	mov	r1, fp
 800210e:	00cb      	lsls	r3, r1, #3
 8002110:	4651      	mov	r1, sl
 8002112:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002116:	4651      	mov	r1, sl
 8002118:	00ca      	lsls	r2, r1, #3
 800211a:	4610      	mov	r0, r2
 800211c:	4619      	mov	r1, r3
 800211e:	4603      	mov	r3, r0
 8002120:	4642      	mov	r2, r8
 8002122:	189b      	adds	r3, r3, r2
 8002124:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002128:	464b      	mov	r3, r9
 800212a:	460a      	mov	r2, r1
 800212c:	eb42 0303 	adc.w	r3, r2, r3
 8002130:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002140:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002144:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002148:	460b      	mov	r3, r1
 800214a:	18db      	adds	r3, r3, r3
 800214c:	62bb      	str	r3, [r7, #40]	; 0x28
 800214e:	4613      	mov	r3, r2
 8002150:	eb42 0303 	adc.w	r3, r2, r3
 8002154:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002156:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800215a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800215e:	f7fe f897 	bl	8000290 <__aeabi_uldivmod>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	4b0d      	ldr	r3, [pc, #52]	; (800219c <UART_SetConfig+0x2d4>)
 8002168:	fba3 1302 	umull	r1, r3, r3, r2
 800216c:	095b      	lsrs	r3, r3, #5
 800216e:	2164      	movs	r1, #100	; 0x64
 8002170:	fb01 f303 	mul.w	r3, r1, r3
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	3332      	adds	r3, #50	; 0x32
 800217a:	4a08      	ldr	r2, [pc, #32]	; (800219c <UART_SetConfig+0x2d4>)
 800217c:	fba2 2303 	umull	r2, r3, r2, r3
 8002180:	095b      	lsrs	r3, r3, #5
 8002182:	f003 0207 	and.w	r2, r3, #7
 8002186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4422      	add	r2, r4
 800218e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002190:	e105      	b.n	800239e <UART_SetConfig+0x4d6>
 8002192:	bf00      	nop
 8002194:	40011000 	.word	0x40011000
 8002198:	40011400 	.word	0x40011400
 800219c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021a4:	2200      	movs	r2, #0
 80021a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80021aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80021ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80021b2:	4642      	mov	r2, r8
 80021b4:	464b      	mov	r3, r9
 80021b6:	1891      	adds	r1, r2, r2
 80021b8:	6239      	str	r1, [r7, #32]
 80021ba:	415b      	adcs	r3, r3
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
 80021be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021c2:	4641      	mov	r1, r8
 80021c4:	1854      	adds	r4, r2, r1
 80021c6:	4649      	mov	r1, r9
 80021c8:	eb43 0501 	adc.w	r5, r3, r1
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	f04f 0300 	mov.w	r3, #0
 80021d4:	00eb      	lsls	r3, r5, #3
 80021d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021da:	00e2      	lsls	r2, r4, #3
 80021dc:	4614      	mov	r4, r2
 80021de:	461d      	mov	r5, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	18e3      	adds	r3, r4, r3
 80021e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80021e8:	464b      	mov	r3, r9
 80021ea:	eb45 0303 	adc.w	r3, r5, r3
 80021ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80021f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80021fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	f04f 0300 	mov.w	r3, #0
 800220a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800220e:	4629      	mov	r1, r5
 8002210:	008b      	lsls	r3, r1, #2
 8002212:	4621      	mov	r1, r4
 8002214:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002218:	4621      	mov	r1, r4
 800221a:	008a      	lsls	r2, r1, #2
 800221c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002220:	f7fe f836 	bl	8000290 <__aeabi_uldivmod>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4b60      	ldr	r3, [pc, #384]	; (80023ac <UART_SetConfig+0x4e4>)
 800222a:	fba3 2302 	umull	r2, r3, r3, r2
 800222e:	095b      	lsrs	r3, r3, #5
 8002230:	011c      	lsls	r4, r3, #4
 8002232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002236:	2200      	movs	r2, #0
 8002238:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800223c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002240:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002244:	4642      	mov	r2, r8
 8002246:	464b      	mov	r3, r9
 8002248:	1891      	adds	r1, r2, r2
 800224a:	61b9      	str	r1, [r7, #24]
 800224c:	415b      	adcs	r3, r3
 800224e:	61fb      	str	r3, [r7, #28]
 8002250:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002254:	4641      	mov	r1, r8
 8002256:	1851      	adds	r1, r2, r1
 8002258:	6139      	str	r1, [r7, #16]
 800225a:	4649      	mov	r1, r9
 800225c:	414b      	adcs	r3, r1
 800225e:	617b      	str	r3, [r7, #20]
 8002260:	f04f 0200 	mov.w	r2, #0
 8002264:	f04f 0300 	mov.w	r3, #0
 8002268:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800226c:	4659      	mov	r1, fp
 800226e:	00cb      	lsls	r3, r1, #3
 8002270:	4651      	mov	r1, sl
 8002272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002276:	4651      	mov	r1, sl
 8002278:	00ca      	lsls	r2, r1, #3
 800227a:	4610      	mov	r0, r2
 800227c:	4619      	mov	r1, r3
 800227e:	4603      	mov	r3, r0
 8002280:	4642      	mov	r2, r8
 8002282:	189b      	adds	r3, r3, r2
 8002284:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002288:	464b      	mov	r3, r9
 800228a:	460a      	mov	r2, r1
 800228c:	eb42 0303 	adc.w	r3, r2, r3
 8002290:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	67bb      	str	r3, [r7, #120]	; 0x78
 800229e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80022ac:	4649      	mov	r1, r9
 80022ae:	008b      	lsls	r3, r1, #2
 80022b0:	4641      	mov	r1, r8
 80022b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022b6:	4641      	mov	r1, r8
 80022b8:	008a      	lsls	r2, r1, #2
 80022ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80022be:	f7fd ffe7 	bl	8000290 <__aeabi_uldivmod>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4b39      	ldr	r3, [pc, #228]	; (80023ac <UART_SetConfig+0x4e4>)
 80022c8:	fba3 1302 	umull	r1, r3, r3, r2
 80022cc:	095b      	lsrs	r3, r3, #5
 80022ce:	2164      	movs	r1, #100	; 0x64
 80022d0:	fb01 f303 	mul.w	r3, r1, r3
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	011b      	lsls	r3, r3, #4
 80022d8:	3332      	adds	r3, #50	; 0x32
 80022da:	4a34      	ldr	r2, [pc, #208]	; (80023ac <UART_SetConfig+0x4e4>)
 80022dc:	fba2 2303 	umull	r2, r3, r2, r3
 80022e0:	095b      	lsrs	r3, r3, #5
 80022e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022e6:	441c      	add	r4, r3
 80022e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022ec:	2200      	movs	r2, #0
 80022ee:	673b      	str	r3, [r7, #112]	; 0x70
 80022f0:	677a      	str	r2, [r7, #116]	; 0x74
 80022f2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80022f6:	4642      	mov	r2, r8
 80022f8:	464b      	mov	r3, r9
 80022fa:	1891      	adds	r1, r2, r2
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	415b      	adcs	r3, r3
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002306:	4641      	mov	r1, r8
 8002308:	1851      	adds	r1, r2, r1
 800230a:	6039      	str	r1, [r7, #0]
 800230c:	4649      	mov	r1, r9
 800230e:	414b      	adcs	r3, r1
 8002310:	607b      	str	r3, [r7, #4]
 8002312:	f04f 0200 	mov.w	r2, #0
 8002316:	f04f 0300 	mov.w	r3, #0
 800231a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800231e:	4659      	mov	r1, fp
 8002320:	00cb      	lsls	r3, r1, #3
 8002322:	4651      	mov	r1, sl
 8002324:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002328:	4651      	mov	r1, sl
 800232a:	00ca      	lsls	r2, r1, #3
 800232c:	4610      	mov	r0, r2
 800232e:	4619      	mov	r1, r3
 8002330:	4603      	mov	r3, r0
 8002332:	4642      	mov	r2, r8
 8002334:	189b      	adds	r3, r3, r2
 8002336:	66bb      	str	r3, [r7, #104]	; 0x68
 8002338:	464b      	mov	r3, r9
 800233a:	460a      	mov	r2, r1
 800233c:	eb42 0303 	adc.w	r3, r2, r3
 8002340:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	663b      	str	r3, [r7, #96]	; 0x60
 800234c:	667a      	str	r2, [r7, #100]	; 0x64
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	f04f 0300 	mov.w	r3, #0
 8002356:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800235a:	4649      	mov	r1, r9
 800235c:	008b      	lsls	r3, r1, #2
 800235e:	4641      	mov	r1, r8
 8002360:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002364:	4641      	mov	r1, r8
 8002366:	008a      	lsls	r2, r1, #2
 8002368:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800236c:	f7fd ff90 	bl	8000290 <__aeabi_uldivmod>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <UART_SetConfig+0x4e4>)
 8002376:	fba3 1302 	umull	r1, r3, r3, r2
 800237a:	095b      	lsrs	r3, r3, #5
 800237c:	2164      	movs	r1, #100	; 0x64
 800237e:	fb01 f303 	mul.w	r3, r1, r3
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	011b      	lsls	r3, r3, #4
 8002386:	3332      	adds	r3, #50	; 0x32
 8002388:	4a08      	ldr	r2, [pc, #32]	; (80023ac <UART_SetConfig+0x4e4>)
 800238a:	fba2 2303 	umull	r2, r3, r2, r3
 800238e:	095b      	lsrs	r3, r3, #5
 8002390:	f003 020f 	and.w	r2, r3, #15
 8002394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4422      	add	r2, r4
 800239c:	609a      	str	r2, [r3, #8]
}
 800239e:	bf00      	nop
 80023a0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80023a4:	46bd      	mov	sp, r7
 80023a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023aa:	bf00      	nop
 80023ac:	51eb851f 	.word	0x51eb851f

080023b0 <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
	 */
	HAL_Init();
 80023b6:	f7fe faff 	bl	80009b8 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 80023ba:	f000 f841 	bl	8002440 <SystemClock_Config>

	/* Initialize BSP Led for LED2 and LED3*/
	BSP_LED_Init(LED1);
 80023be:	2000      	movs	r0, #0
 80023c0:	f7fe f96e 	bl	80006a0 <BSP_LED_Init>
	BSP_LED_Init(LED2);
 80023c4:	2001      	movs	r0, #1
 80023c6:	f7fe f96b 	bl	80006a0 <BSP_LED_Init>

	if (uartInit()==true){
 80023ca:	f7fe f8e3 	bl	8000594 <uartInit>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d105      	bne.n	80023e0 <main+0x30>
		printf("** UART iniciada ** \n\r");
 80023d4:	4818      	ldr	r0, [pc, #96]	; (8002438 <main+0x88>)
 80023d6:	f000 f8f7 	bl	80025c8 <iprintf>
		}


	}

	int total = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	e003      	b.n	80023e8 <main+0x38>
		BSP_LED_Toggle(LED1);
 80023e0:	2000      	movs	r0, #0
 80023e2:	f7fe f9c7 	bl	8000774 <BSP_LED_Toggle>
		while(1)
 80023e6:	e7fe      	b.n	80023e6 <main+0x36>
	//HAL_UART_Transmit(&UartHandle, dato, sizeof(dato), 0xFFFF);

	/* Infinite loop */
	while(1)
	{
		BSP_LED_Toggle(LED2);
 80023e8:	2001      	movs	r0, #1
 80023ea:	f7fe f9c3 	bl	8000774 <BSP_LED_Toggle>
		HAL_Delay(100);
 80023ee:	2064      	movs	r0, #100	; 0x64
 80023f0:	f7fe fb4e 	bl	8000a90 <HAL_Delay>

		printf("d %d \n\r", total);
 80023f4:	68f9      	ldr	r1, [r7, #12]
 80023f6:	4811      	ldr	r0, [pc, #68]	; (800243c <main+0x8c>)
 80023f8:	f000 f8e6 	bl	80025c8 <iprintf>
		total = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	60fb      	str	r3, [r7, #12]

		//printf("** Test finished successfully. ** \n\r");


		char bufferLectura[10];
		bool_t actividadUart = false;
 8002400:	2300      	movs	r3, #0
 8002402:	72fb      	strb	r3, [r7, #11]

		actividadUart = uartReceiveStringSize((uint8_t *) bufferLectura, 2);
 8002404:	463b      	mov	r3, r7
 8002406:	2102      	movs	r1, #2
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe f8f7 	bl	80005fc <uartReceiveStringSize>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	bf14      	ite	ne
 8002414:	2301      	movne	r3, #1
 8002416:	2300      	moveq	r3, #0
 8002418:	72fb      	strb	r3, [r7, #11]
		if (actividadUart== true)
 800241a:	7afb      	ldrb	r3, [r7, #11]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d004      	beq.n	800242a <main+0x7a>
		{
			total = convierteNumero((uint8_t *) bufferLectura);
 8002420:	463b      	mov	r3, r7
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe f904 	bl	8000630 <convierteNumero>
 8002428:	60f8      	str	r0, [r7, #12]
		//bufferLectura[0] = '\0';
		//printf("El carácter '%c' es %d en entero" comoEntero);



		if (total == 12){
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2b0c      	cmp	r3, #12
 800242e:	d1db      	bne.n	80023e8 <main+0x38>
			BSP_LED_Toggle(LED1);
 8002430:	2000      	movs	r0, #0
 8002432:	f7fe f99f 	bl	8000774 <BSP_LED_Toggle>
	{
 8002436:	e7d7      	b.n	80023e8 <main+0x38>
 8002438:	08003514 	.word	0x08003514
 800243c:	0800352c 	.word	0x0800352c

08002440 <SystemClock_Config>:
 *            Flash Latency(WS)              = 5
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b094      	sub	sp, #80	; 0x50
 8002444:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	4b2c      	ldr	r3, [pc, #176]	; (80024fc <SystemClock_Config+0xbc>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	4a2b      	ldr	r2, [pc, #172]	; (80024fc <SystemClock_Config+0xbc>)
 8002450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002454:	6413      	str	r3, [r2, #64]	; 0x40
 8002456:	4b29      	ldr	r3, [pc, #164]	; (80024fc <SystemClock_Config+0xbc>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245e:	60bb      	str	r3, [r7, #8]
 8002460:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002462:	2300      	movs	r3, #0
 8002464:	607b      	str	r3, [r7, #4]
 8002466:	4b26      	ldr	r3, [pc, #152]	; (8002500 <SystemClock_Config+0xc0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a25      	ldr	r2, [pc, #148]	; (8002500 <SystemClock_Config+0xc0>)
 800246c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	4b23      	ldr	r3, [pc, #140]	; (8002500 <SystemClock_Config+0xc0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800247a:	607b      	str	r3, [r7, #4]
 800247c:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800247e:	2301      	movs	r3, #1
 8002480:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002482:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002486:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002488:	2302      	movs	r3, #2
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800248c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002490:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002492:	2308      	movs	r3, #8
 8002494:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 8002496:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800249a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800249c:	2302      	movs	r3, #2
 800249e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80024a0:	2307      	movs	r3, #7
 80024a2:	63bb      	str	r3, [r7, #56]	; 0x38
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024a4:	f107 030c 	add.w	r3, r7, #12
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fe fe85 	bl	80011b8 <HAL_RCC_OscConfig>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <SystemClock_Config+0x78>
	{
		/* Initialization Error */
		Error_Handler();
 80024b4:	f000 f826 	bl	8002504 <Error_Handler>
	}

	if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 80024b8:	f7fe fe2e 	bl	8001118 <HAL_PWREx_EnableOverDrive>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <SystemClock_Config+0x86>
	{
		/* Initialization Error */
		Error_Handler();
 80024c2:	f000 f81f 	bl	8002504 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80024c6:	230f      	movs	r3, #15
 80024c8:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024ca:	2302      	movs	r3, #2
 80024cc:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024ce:	2300      	movs	r3, #0
 80024d0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80024d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80024d6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80024d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024dc:	64fb      	str	r3, [r7, #76]	; 0x4c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80024de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024e2:	2105      	movs	r1, #5
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff f8df 	bl	80016a8 <HAL_RCC_ClockConfig>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <SystemClock_Config+0xb4>
	{
		/* Initialization Error */
		Error_Handler();
 80024f0:	f000 f808 	bl	8002504 <Error_Handler>
	}
}
 80024f4:	bf00      	nop
 80024f6:	3750      	adds	r7, #80	; 0x50
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40023800 	.word	0x40023800
 8002500:	40007000 	.word	0x40007000

08002504 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 8002508:	2001      	movs	r0, #1
 800250a:	f7fe f919 	bl	8000740 <BSP_LED_On>
	while (1)
 800250e:	e7fe      	b.n	800250e <Error_Handler+0xa>

08002510 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002510:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002548 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002514:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002516:	e003      	b.n	8002520 <LoopCopyDataInit>

08002518 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800251a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800251c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800251e:	3104      	adds	r1, #4

08002520 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002520:	480b      	ldr	r0, [pc, #44]	; (8002550 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002522:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002524:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002526:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002528:	d3f6      	bcc.n	8002518 <CopyDataInit>
  ldr  r2, =_sbss
 800252a:	4a0b      	ldr	r2, [pc, #44]	; (8002558 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800252c:	e002      	b.n	8002534 <LoopFillZerobss>

0800252e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800252e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002530:	f842 3b04 	str.w	r3, [r2], #4

08002534 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002534:	4b09      	ldr	r3, [pc, #36]	; (800255c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002536:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002538:	d3f9      	bcc.n	800252e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800253a:	f7fe f935 	bl	80007a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800253e:	f000 f817 	bl	8002570 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002542:	f7ff ff35 	bl	80023b0 <main>
  bx  lr    
 8002546:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002548:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800254c:	080035fc 	.word	0x080035fc
  ldr  r0, =_sdata
 8002550:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002554:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8002558:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 800255c:	200000f4 	.word	0x200000f4

08002560 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002560:	e7fe      	b.n	8002560 <ADC_IRQHandler>
	...

08002564 <__errno>:
 8002564:	4b01      	ldr	r3, [pc, #4]	; (800256c <__errno+0x8>)
 8002566:	6818      	ldr	r0, [r3, #0]
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	20000018 	.word	0x20000018

08002570 <__libc_init_array>:
 8002570:	b570      	push	{r4, r5, r6, lr}
 8002572:	4d0d      	ldr	r5, [pc, #52]	; (80025a8 <__libc_init_array+0x38>)
 8002574:	4c0d      	ldr	r4, [pc, #52]	; (80025ac <__libc_init_array+0x3c>)
 8002576:	1b64      	subs	r4, r4, r5
 8002578:	10a4      	asrs	r4, r4, #2
 800257a:	2600      	movs	r6, #0
 800257c:	42a6      	cmp	r6, r4
 800257e:	d109      	bne.n	8002594 <__libc_init_array+0x24>
 8002580:	4d0b      	ldr	r5, [pc, #44]	; (80025b0 <__libc_init_array+0x40>)
 8002582:	4c0c      	ldr	r4, [pc, #48]	; (80025b4 <__libc_init_array+0x44>)
 8002584:	f000 ffae 	bl	80034e4 <_init>
 8002588:	1b64      	subs	r4, r4, r5
 800258a:	10a4      	asrs	r4, r4, #2
 800258c:	2600      	movs	r6, #0
 800258e:	42a6      	cmp	r6, r4
 8002590:	d105      	bne.n	800259e <__libc_init_array+0x2e>
 8002592:	bd70      	pop	{r4, r5, r6, pc}
 8002594:	f855 3b04 	ldr.w	r3, [r5], #4
 8002598:	4798      	blx	r3
 800259a:	3601      	adds	r6, #1
 800259c:	e7ee      	b.n	800257c <__libc_init_array+0xc>
 800259e:	f855 3b04 	ldr.w	r3, [r5], #4
 80025a2:	4798      	blx	r3
 80025a4:	3601      	adds	r6, #1
 80025a6:	e7f2      	b.n	800258e <__libc_init_array+0x1e>
 80025a8:	080035f4 	.word	0x080035f4
 80025ac:	080035f4 	.word	0x080035f4
 80025b0:	080035f4 	.word	0x080035f4
 80025b4:	080035f8 	.word	0x080035f8

080025b8 <memset>:
 80025b8:	4402      	add	r2, r0
 80025ba:	4603      	mov	r3, r0
 80025bc:	4293      	cmp	r3, r2
 80025be:	d100      	bne.n	80025c2 <memset+0xa>
 80025c0:	4770      	bx	lr
 80025c2:	f803 1b01 	strb.w	r1, [r3], #1
 80025c6:	e7f9      	b.n	80025bc <memset+0x4>

080025c8 <iprintf>:
 80025c8:	b40f      	push	{r0, r1, r2, r3}
 80025ca:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <iprintf+0x2c>)
 80025cc:	b513      	push	{r0, r1, r4, lr}
 80025ce:	681c      	ldr	r4, [r3, #0]
 80025d0:	b124      	cbz	r4, 80025dc <iprintf+0x14>
 80025d2:	69a3      	ldr	r3, [r4, #24]
 80025d4:	b913      	cbnz	r3, 80025dc <iprintf+0x14>
 80025d6:	4620      	mov	r0, r4
 80025d8:	f000 f866 	bl	80026a8 <__sinit>
 80025dc:	ab05      	add	r3, sp, #20
 80025de:	9a04      	ldr	r2, [sp, #16]
 80025e0:	68a1      	ldr	r1, [r4, #8]
 80025e2:	9301      	str	r3, [sp, #4]
 80025e4:	4620      	mov	r0, r4
 80025e6:	f000 f9bd 	bl	8002964 <_vfiprintf_r>
 80025ea:	b002      	add	sp, #8
 80025ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025f0:	b004      	add	sp, #16
 80025f2:	4770      	bx	lr
 80025f4:	20000018 	.word	0x20000018

080025f8 <std>:
 80025f8:	2300      	movs	r3, #0
 80025fa:	b510      	push	{r4, lr}
 80025fc:	4604      	mov	r4, r0
 80025fe:	e9c0 3300 	strd	r3, r3, [r0]
 8002602:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002606:	6083      	str	r3, [r0, #8]
 8002608:	8181      	strh	r1, [r0, #12]
 800260a:	6643      	str	r3, [r0, #100]	; 0x64
 800260c:	81c2      	strh	r2, [r0, #14]
 800260e:	6183      	str	r3, [r0, #24]
 8002610:	4619      	mov	r1, r3
 8002612:	2208      	movs	r2, #8
 8002614:	305c      	adds	r0, #92	; 0x5c
 8002616:	f7ff ffcf 	bl	80025b8 <memset>
 800261a:	4b05      	ldr	r3, [pc, #20]	; (8002630 <std+0x38>)
 800261c:	6263      	str	r3, [r4, #36]	; 0x24
 800261e:	4b05      	ldr	r3, [pc, #20]	; (8002634 <std+0x3c>)
 8002620:	62a3      	str	r3, [r4, #40]	; 0x28
 8002622:	4b05      	ldr	r3, [pc, #20]	; (8002638 <std+0x40>)
 8002624:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002626:	4b05      	ldr	r3, [pc, #20]	; (800263c <std+0x44>)
 8002628:	6224      	str	r4, [r4, #32]
 800262a:	6323      	str	r3, [r4, #48]	; 0x30
 800262c:	bd10      	pop	{r4, pc}
 800262e:	bf00      	nop
 8002630:	08002f0d 	.word	0x08002f0d
 8002634:	08002f2f 	.word	0x08002f2f
 8002638:	08002f67 	.word	0x08002f67
 800263c:	08002f8b 	.word	0x08002f8b

08002640 <_cleanup_r>:
 8002640:	4901      	ldr	r1, [pc, #4]	; (8002648 <_cleanup_r+0x8>)
 8002642:	f000 b8af 	b.w	80027a4 <_fwalk_reent>
 8002646:	bf00      	nop
 8002648:	08003265 	.word	0x08003265

0800264c <__sfmoreglue>:
 800264c:	b570      	push	{r4, r5, r6, lr}
 800264e:	2268      	movs	r2, #104	; 0x68
 8002650:	1e4d      	subs	r5, r1, #1
 8002652:	4355      	muls	r5, r2
 8002654:	460e      	mov	r6, r1
 8002656:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800265a:	f000 f8e5 	bl	8002828 <_malloc_r>
 800265e:	4604      	mov	r4, r0
 8002660:	b140      	cbz	r0, 8002674 <__sfmoreglue+0x28>
 8002662:	2100      	movs	r1, #0
 8002664:	e9c0 1600 	strd	r1, r6, [r0]
 8002668:	300c      	adds	r0, #12
 800266a:	60a0      	str	r0, [r4, #8]
 800266c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002670:	f7ff ffa2 	bl	80025b8 <memset>
 8002674:	4620      	mov	r0, r4
 8002676:	bd70      	pop	{r4, r5, r6, pc}

08002678 <__sfp_lock_acquire>:
 8002678:	4801      	ldr	r0, [pc, #4]	; (8002680 <__sfp_lock_acquire+0x8>)
 800267a:	f000 b8b3 	b.w	80027e4 <__retarget_lock_acquire_recursive>
 800267e:	bf00      	nop
 8002680:	200000e5 	.word	0x200000e5

08002684 <__sfp_lock_release>:
 8002684:	4801      	ldr	r0, [pc, #4]	; (800268c <__sfp_lock_release+0x8>)
 8002686:	f000 b8ae 	b.w	80027e6 <__retarget_lock_release_recursive>
 800268a:	bf00      	nop
 800268c:	200000e5 	.word	0x200000e5

08002690 <__sinit_lock_acquire>:
 8002690:	4801      	ldr	r0, [pc, #4]	; (8002698 <__sinit_lock_acquire+0x8>)
 8002692:	f000 b8a7 	b.w	80027e4 <__retarget_lock_acquire_recursive>
 8002696:	bf00      	nop
 8002698:	200000e6 	.word	0x200000e6

0800269c <__sinit_lock_release>:
 800269c:	4801      	ldr	r0, [pc, #4]	; (80026a4 <__sinit_lock_release+0x8>)
 800269e:	f000 b8a2 	b.w	80027e6 <__retarget_lock_release_recursive>
 80026a2:	bf00      	nop
 80026a4:	200000e6 	.word	0x200000e6

080026a8 <__sinit>:
 80026a8:	b510      	push	{r4, lr}
 80026aa:	4604      	mov	r4, r0
 80026ac:	f7ff fff0 	bl	8002690 <__sinit_lock_acquire>
 80026b0:	69a3      	ldr	r3, [r4, #24]
 80026b2:	b11b      	cbz	r3, 80026bc <__sinit+0x14>
 80026b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026b8:	f7ff bff0 	b.w	800269c <__sinit_lock_release>
 80026bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80026c0:	6523      	str	r3, [r4, #80]	; 0x50
 80026c2:	4b13      	ldr	r3, [pc, #76]	; (8002710 <__sinit+0x68>)
 80026c4:	4a13      	ldr	r2, [pc, #76]	; (8002714 <__sinit+0x6c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80026ca:	42a3      	cmp	r3, r4
 80026cc:	bf04      	itt	eq
 80026ce:	2301      	moveq	r3, #1
 80026d0:	61a3      	streq	r3, [r4, #24]
 80026d2:	4620      	mov	r0, r4
 80026d4:	f000 f820 	bl	8002718 <__sfp>
 80026d8:	6060      	str	r0, [r4, #4]
 80026da:	4620      	mov	r0, r4
 80026dc:	f000 f81c 	bl	8002718 <__sfp>
 80026e0:	60a0      	str	r0, [r4, #8]
 80026e2:	4620      	mov	r0, r4
 80026e4:	f000 f818 	bl	8002718 <__sfp>
 80026e8:	2200      	movs	r2, #0
 80026ea:	60e0      	str	r0, [r4, #12]
 80026ec:	2104      	movs	r1, #4
 80026ee:	6860      	ldr	r0, [r4, #4]
 80026f0:	f7ff ff82 	bl	80025f8 <std>
 80026f4:	68a0      	ldr	r0, [r4, #8]
 80026f6:	2201      	movs	r2, #1
 80026f8:	2109      	movs	r1, #9
 80026fa:	f7ff ff7d 	bl	80025f8 <std>
 80026fe:	68e0      	ldr	r0, [r4, #12]
 8002700:	2202      	movs	r2, #2
 8002702:	2112      	movs	r1, #18
 8002704:	f7ff ff78 	bl	80025f8 <std>
 8002708:	2301      	movs	r3, #1
 800270a:	61a3      	str	r3, [r4, #24]
 800270c:	e7d2      	b.n	80026b4 <__sinit+0xc>
 800270e:	bf00      	nop
 8002710:	08003554 	.word	0x08003554
 8002714:	08002641 	.word	0x08002641

08002718 <__sfp>:
 8002718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800271a:	4607      	mov	r7, r0
 800271c:	f7ff ffac 	bl	8002678 <__sfp_lock_acquire>
 8002720:	4b1e      	ldr	r3, [pc, #120]	; (800279c <__sfp+0x84>)
 8002722:	681e      	ldr	r6, [r3, #0]
 8002724:	69b3      	ldr	r3, [r6, #24]
 8002726:	b913      	cbnz	r3, 800272e <__sfp+0x16>
 8002728:	4630      	mov	r0, r6
 800272a:	f7ff ffbd 	bl	80026a8 <__sinit>
 800272e:	3648      	adds	r6, #72	; 0x48
 8002730:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002734:	3b01      	subs	r3, #1
 8002736:	d503      	bpl.n	8002740 <__sfp+0x28>
 8002738:	6833      	ldr	r3, [r6, #0]
 800273a:	b30b      	cbz	r3, 8002780 <__sfp+0x68>
 800273c:	6836      	ldr	r6, [r6, #0]
 800273e:	e7f7      	b.n	8002730 <__sfp+0x18>
 8002740:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002744:	b9d5      	cbnz	r5, 800277c <__sfp+0x64>
 8002746:	4b16      	ldr	r3, [pc, #88]	; (80027a0 <__sfp+0x88>)
 8002748:	60e3      	str	r3, [r4, #12]
 800274a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800274e:	6665      	str	r5, [r4, #100]	; 0x64
 8002750:	f000 f847 	bl	80027e2 <__retarget_lock_init_recursive>
 8002754:	f7ff ff96 	bl	8002684 <__sfp_lock_release>
 8002758:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800275c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002760:	6025      	str	r5, [r4, #0]
 8002762:	61a5      	str	r5, [r4, #24]
 8002764:	2208      	movs	r2, #8
 8002766:	4629      	mov	r1, r5
 8002768:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800276c:	f7ff ff24 	bl	80025b8 <memset>
 8002770:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002774:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002778:	4620      	mov	r0, r4
 800277a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800277c:	3468      	adds	r4, #104	; 0x68
 800277e:	e7d9      	b.n	8002734 <__sfp+0x1c>
 8002780:	2104      	movs	r1, #4
 8002782:	4638      	mov	r0, r7
 8002784:	f7ff ff62 	bl	800264c <__sfmoreglue>
 8002788:	4604      	mov	r4, r0
 800278a:	6030      	str	r0, [r6, #0]
 800278c:	2800      	cmp	r0, #0
 800278e:	d1d5      	bne.n	800273c <__sfp+0x24>
 8002790:	f7ff ff78 	bl	8002684 <__sfp_lock_release>
 8002794:	230c      	movs	r3, #12
 8002796:	603b      	str	r3, [r7, #0]
 8002798:	e7ee      	b.n	8002778 <__sfp+0x60>
 800279a:	bf00      	nop
 800279c:	08003554 	.word	0x08003554
 80027a0:	ffff0001 	.word	0xffff0001

080027a4 <_fwalk_reent>:
 80027a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027a8:	4606      	mov	r6, r0
 80027aa:	4688      	mov	r8, r1
 80027ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80027b0:	2700      	movs	r7, #0
 80027b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80027b6:	f1b9 0901 	subs.w	r9, r9, #1
 80027ba:	d505      	bpl.n	80027c8 <_fwalk_reent+0x24>
 80027bc:	6824      	ldr	r4, [r4, #0]
 80027be:	2c00      	cmp	r4, #0
 80027c0:	d1f7      	bne.n	80027b2 <_fwalk_reent+0xe>
 80027c2:	4638      	mov	r0, r7
 80027c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80027c8:	89ab      	ldrh	r3, [r5, #12]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d907      	bls.n	80027de <_fwalk_reent+0x3a>
 80027ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80027d2:	3301      	adds	r3, #1
 80027d4:	d003      	beq.n	80027de <_fwalk_reent+0x3a>
 80027d6:	4629      	mov	r1, r5
 80027d8:	4630      	mov	r0, r6
 80027da:	47c0      	blx	r8
 80027dc:	4307      	orrs	r7, r0
 80027de:	3568      	adds	r5, #104	; 0x68
 80027e0:	e7e9      	b.n	80027b6 <_fwalk_reent+0x12>

080027e2 <__retarget_lock_init_recursive>:
 80027e2:	4770      	bx	lr

080027e4 <__retarget_lock_acquire_recursive>:
 80027e4:	4770      	bx	lr

080027e6 <__retarget_lock_release_recursive>:
 80027e6:	4770      	bx	lr

080027e8 <sbrk_aligned>:
 80027e8:	b570      	push	{r4, r5, r6, lr}
 80027ea:	4e0e      	ldr	r6, [pc, #56]	; (8002824 <sbrk_aligned+0x3c>)
 80027ec:	460c      	mov	r4, r1
 80027ee:	6831      	ldr	r1, [r6, #0]
 80027f0:	4605      	mov	r5, r0
 80027f2:	b911      	cbnz	r1, 80027fa <sbrk_aligned+0x12>
 80027f4:	f000 fb7a 	bl	8002eec <_sbrk_r>
 80027f8:	6030      	str	r0, [r6, #0]
 80027fa:	4621      	mov	r1, r4
 80027fc:	4628      	mov	r0, r5
 80027fe:	f000 fb75 	bl	8002eec <_sbrk_r>
 8002802:	1c43      	adds	r3, r0, #1
 8002804:	d00a      	beq.n	800281c <sbrk_aligned+0x34>
 8002806:	1cc4      	adds	r4, r0, #3
 8002808:	f024 0403 	bic.w	r4, r4, #3
 800280c:	42a0      	cmp	r0, r4
 800280e:	d007      	beq.n	8002820 <sbrk_aligned+0x38>
 8002810:	1a21      	subs	r1, r4, r0
 8002812:	4628      	mov	r0, r5
 8002814:	f000 fb6a 	bl	8002eec <_sbrk_r>
 8002818:	3001      	adds	r0, #1
 800281a:	d101      	bne.n	8002820 <sbrk_aligned+0x38>
 800281c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002820:	4620      	mov	r0, r4
 8002822:	bd70      	pop	{r4, r5, r6, pc}
 8002824:	200000ec 	.word	0x200000ec

08002828 <_malloc_r>:
 8002828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800282c:	1ccd      	adds	r5, r1, #3
 800282e:	f025 0503 	bic.w	r5, r5, #3
 8002832:	3508      	adds	r5, #8
 8002834:	2d0c      	cmp	r5, #12
 8002836:	bf38      	it	cc
 8002838:	250c      	movcc	r5, #12
 800283a:	2d00      	cmp	r5, #0
 800283c:	4607      	mov	r7, r0
 800283e:	db01      	blt.n	8002844 <_malloc_r+0x1c>
 8002840:	42a9      	cmp	r1, r5
 8002842:	d905      	bls.n	8002850 <_malloc_r+0x28>
 8002844:	230c      	movs	r3, #12
 8002846:	603b      	str	r3, [r7, #0]
 8002848:	2600      	movs	r6, #0
 800284a:	4630      	mov	r0, r6
 800284c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002850:	4e2e      	ldr	r6, [pc, #184]	; (800290c <_malloc_r+0xe4>)
 8002852:	f000 fdbb 	bl	80033cc <__malloc_lock>
 8002856:	6833      	ldr	r3, [r6, #0]
 8002858:	461c      	mov	r4, r3
 800285a:	bb34      	cbnz	r4, 80028aa <_malloc_r+0x82>
 800285c:	4629      	mov	r1, r5
 800285e:	4638      	mov	r0, r7
 8002860:	f7ff ffc2 	bl	80027e8 <sbrk_aligned>
 8002864:	1c43      	adds	r3, r0, #1
 8002866:	4604      	mov	r4, r0
 8002868:	d14d      	bne.n	8002906 <_malloc_r+0xde>
 800286a:	6834      	ldr	r4, [r6, #0]
 800286c:	4626      	mov	r6, r4
 800286e:	2e00      	cmp	r6, #0
 8002870:	d140      	bne.n	80028f4 <_malloc_r+0xcc>
 8002872:	6823      	ldr	r3, [r4, #0]
 8002874:	4631      	mov	r1, r6
 8002876:	4638      	mov	r0, r7
 8002878:	eb04 0803 	add.w	r8, r4, r3
 800287c:	f000 fb36 	bl	8002eec <_sbrk_r>
 8002880:	4580      	cmp	r8, r0
 8002882:	d13a      	bne.n	80028fa <_malloc_r+0xd2>
 8002884:	6821      	ldr	r1, [r4, #0]
 8002886:	3503      	adds	r5, #3
 8002888:	1a6d      	subs	r5, r5, r1
 800288a:	f025 0503 	bic.w	r5, r5, #3
 800288e:	3508      	adds	r5, #8
 8002890:	2d0c      	cmp	r5, #12
 8002892:	bf38      	it	cc
 8002894:	250c      	movcc	r5, #12
 8002896:	4629      	mov	r1, r5
 8002898:	4638      	mov	r0, r7
 800289a:	f7ff ffa5 	bl	80027e8 <sbrk_aligned>
 800289e:	3001      	adds	r0, #1
 80028a0:	d02b      	beq.n	80028fa <_malloc_r+0xd2>
 80028a2:	6823      	ldr	r3, [r4, #0]
 80028a4:	442b      	add	r3, r5
 80028a6:	6023      	str	r3, [r4, #0]
 80028a8:	e00e      	b.n	80028c8 <_malloc_r+0xa0>
 80028aa:	6822      	ldr	r2, [r4, #0]
 80028ac:	1b52      	subs	r2, r2, r5
 80028ae:	d41e      	bmi.n	80028ee <_malloc_r+0xc6>
 80028b0:	2a0b      	cmp	r2, #11
 80028b2:	d916      	bls.n	80028e2 <_malloc_r+0xba>
 80028b4:	1961      	adds	r1, r4, r5
 80028b6:	42a3      	cmp	r3, r4
 80028b8:	6025      	str	r5, [r4, #0]
 80028ba:	bf18      	it	ne
 80028bc:	6059      	strne	r1, [r3, #4]
 80028be:	6863      	ldr	r3, [r4, #4]
 80028c0:	bf08      	it	eq
 80028c2:	6031      	streq	r1, [r6, #0]
 80028c4:	5162      	str	r2, [r4, r5]
 80028c6:	604b      	str	r3, [r1, #4]
 80028c8:	4638      	mov	r0, r7
 80028ca:	f104 060b 	add.w	r6, r4, #11
 80028ce:	f000 fd83 	bl	80033d8 <__malloc_unlock>
 80028d2:	f026 0607 	bic.w	r6, r6, #7
 80028d6:	1d23      	adds	r3, r4, #4
 80028d8:	1af2      	subs	r2, r6, r3
 80028da:	d0b6      	beq.n	800284a <_malloc_r+0x22>
 80028dc:	1b9b      	subs	r3, r3, r6
 80028de:	50a3      	str	r3, [r4, r2]
 80028e0:	e7b3      	b.n	800284a <_malloc_r+0x22>
 80028e2:	6862      	ldr	r2, [r4, #4]
 80028e4:	42a3      	cmp	r3, r4
 80028e6:	bf0c      	ite	eq
 80028e8:	6032      	streq	r2, [r6, #0]
 80028ea:	605a      	strne	r2, [r3, #4]
 80028ec:	e7ec      	b.n	80028c8 <_malloc_r+0xa0>
 80028ee:	4623      	mov	r3, r4
 80028f0:	6864      	ldr	r4, [r4, #4]
 80028f2:	e7b2      	b.n	800285a <_malloc_r+0x32>
 80028f4:	4634      	mov	r4, r6
 80028f6:	6876      	ldr	r6, [r6, #4]
 80028f8:	e7b9      	b.n	800286e <_malloc_r+0x46>
 80028fa:	230c      	movs	r3, #12
 80028fc:	603b      	str	r3, [r7, #0]
 80028fe:	4638      	mov	r0, r7
 8002900:	f000 fd6a 	bl	80033d8 <__malloc_unlock>
 8002904:	e7a1      	b.n	800284a <_malloc_r+0x22>
 8002906:	6025      	str	r5, [r4, #0]
 8002908:	e7de      	b.n	80028c8 <_malloc_r+0xa0>
 800290a:	bf00      	nop
 800290c:	200000e8 	.word	0x200000e8

08002910 <__sfputc_r>:
 8002910:	6893      	ldr	r3, [r2, #8]
 8002912:	3b01      	subs	r3, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	b410      	push	{r4}
 8002918:	6093      	str	r3, [r2, #8]
 800291a:	da08      	bge.n	800292e <__sfputc_r+0x1e>
 800291c:	6994      	ldr	r4, [r2, #24]
 800291e:	42a3      	cmp	r3, r4
 8002920:	db01      	blt.n	8002926 <__sfputc_r+0x16>
 8002922:	290a      	cmp	r1, #10
 8002924:	d103      	bne.n	800292e <__sfputc_r+0x1e>
 8002926:	f85d 4b04 	ldr.w	r4, [sp], #4
 800292a:	f000 bb33 	b.w	8002f94 <__swbuf_r>
 800292e:	6813      	ldr	r3, [r2, #0]
 8002930:	1c58      	adds	r0, r3, #1
 8002932:	6010      	str	r0, [r2, #0]
 8002934:	7019      	strb	r1, [r3, #0]
 8002936:	4608      	mov	r0, r1
 8002938:	f85d 4b04 	ldr.w	r4, [sp], #4
 800293c:	4770      	bx	lr

0800293e <__sfputs_r>:
 800293e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002940:	4606      	mov	r6, r0
 8002942:	460f      	mov	r7, r1
 8002944:	4614      	mov	r4, r2
 8002946:	18d5      	adds	r5, r2, r3
 8002948:	42ac      	cmp	r4, r5
 800294a:	d101      	bne.n	8002950 <__sfputs_r+0x12>
 800294c:	2000      	movs	r0, #0
 800294e:	e007      	b.n	8002960 <__sfputs_r+0x22>
 8002950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002954:	463a      	mov	r2, r7
 8002956:	4630      	mov	r0, r6
 8002958:	f7ff ffda 	bl	8002910 <__sfputc_r>
 800295c:	1c43      	adds	r3, r0, #1
 800295e:	d1f3      	bne.n	8002948 <__sfputs_r+0xa>
 8002960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002964 <_vfiprintf_r>:
 8002964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002968:	460d      	mov	r5, r1
 800296a:	b09d      	sub	sp, #116	; 0x74
 800296c:	4614      	mov	r4, r2
 800296e:	4698      	mov	r8, r3
 8002970:	4606      	mov	r6, r0
 8002972:	b118      	cbz	r0, 800297c <_vfiprintf_r+0x18>
 8002974:	6983      	ldr	r3, [r0, #24]
 8002976:	b90b      	cbnz	r3, 800297c <_vfiprintf_r+0x18>
 8002978:	f7ff fe96 	bl	80026a8 <__sinit>
 800297c:	4b89      	ldr	r3, [pc, #548]	; (8002ba4 <_vfiprintf_r+0x240>)
 800297e:	429d      	cmp	r5, r3
 8002980:	d11b      	bne.n	80029ba <_vfiprintf_r+0x56>
 8002982:	6875      	ldr	r5, [r6, #4]
 8002984:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002986:	07d9      	lsls	r1, r3, #31
 8002988:	d405      	bmi.n	8002996 <_vfiprintf_r+0x32>
 800298a:	89ab      	ldrh	r3, [r5, #12]
 800298c:	059a      	lsls	r2, r3, #22
 800298e:	d402      	bmi.n	8002996 <_vfiprintf_r+0x32>
 8002990:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002992:	f7ff ff27 	bl	80027e4 <__retarget_lock_acquire_recursive>
 8002996:	89ab      	ldrh	r3, [r5, #12]
 8002998:	071b      	lsls	r3, r3, #28
 800299a:	d501      	bpl.n	80029a0 <_vfiprintf_r+0x3c>
 800299c:	692b      	ldr	r3, [r5, #16]
 800299e:	b9eb      	cbnz	r3, 80029dc <_vfiprintf_r+0x78>
 80029a0:	4629      	mov	r1, r5
 80029a2:	4630      	mov	r0, r6
 80029a4:	f000 fb5a 	bl	800305c <__swsetup_r>
 80029a8:	b1c0      	cbz	r0, 80029dc <_vfiprintf_r+0x78>
 80029aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80029ac:	07dc      	lsls	r4, r3, #31
 80029ae:	d50e      	bpl.n	80029ce <_vfiprintf_r+0x6a>
 80029b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029b4:	b01d      	add	sp, #116	; 0x74
 80029b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029ba:	4b7b      	ldr	r3, [pc, #492]	; (8002ba8 <_vfiprintf_r+0x244>)
 80029bc:	429d      	cmp	r5, r3
 80029be:	d101      	bne.n	80029c4 <_vfiprintf_r+0x60>
 80029c0:	68b5      	ldr	r5, [r6, #8]
 80029c2:	e7df      	b.n	8002984 <_vfiprintf_r+0x20>
 80029c4:	4b79      	ldr	r3, [pc, #484]	; (8002bac <_vfiprintf_r+0x248>)
 80029c6:	429d      	cmp	r5, r3
 80029c8:	bf08      	it	eq
 80029ca:	68f5      	ldreq	r5, [r6, #12]
 80029cc:	e7da      	b.n	8002984 <_vfiprintf_r+0x20>
 80029ce:	89ab      	ldrh	r3, [r5, #12]
 80029d0:	0598      	lsls	r0, r3, #22
 80029d2:	d4ed      	bmi.n	80029b0 <_vfiprintf_r+0x4c>
 80029d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80029d6:	f7ff ff06 	bl	80027e6 <__retarget_lock_release_recursive>
 80029da:	e7e9      	b.n	80029b0 <_vfiprintf_r+0x4c>
 80029dc:	2300      	movs	r3, #0
 80029de:	9309      	str	r3, [sp, #36]	; 0x24
 80029e0:	2320      	movs	r3, #32
 80029e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80029e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80029ea:	2330      	movs	r3, #48	; 0x30
 80029ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002bb0 <_vfiprintf_r+0x24c>
 80029f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80029f4:	f04f 0901 	mov.w	r9, #1
 80029f8:	4623      	mov	r3, r4
 80029fa:	469a      	mov	sl, r3
 80029fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a00:	b10a      	cbz	r2, 8002a06 <_vfiprintf_r+0xa2>
 8002a02:	2a25      	cmp	r2, #37	; 0x25
 8002a04:	d1f9      	bne.n	80029fa <_vfiprintf_r+0x96>
 8002a06:	ebba 0b04 	subs.w	fp, sl, r4
 8002a0a:	d00b      	beq.n	8002a24 <_vfiprintf_r+0xc0>
 8002a0c:	465b      	mov	r3, fp
 8002a0e:	4622      	mov	r2, r4
 8002a10:	4629      	mov	r1, r5
 8002a12:	4630      	mov	r0, r6
 8002a14:	f7ff ff93 	bl	800293e <__sfputs_r>
 8002a18:	3001      	adds	r0, #1
 8002a1a:	f000 80aa 	beq.w	8002b72 <_vfiprintf_r+0x20e>
 8002a1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a20:	445a      	add	r2, fp
 8002a22:	9209      	str	r2, [sp, #36]	; 0x24
 8002a24:	f89a 3000 	ldrb.w	r3, [sl]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 80a2 	beq.w	8002b72 <_vfiprintf_r+0x20e>
 8002a2e:	2300      	movs	r3, #0
 8002a30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a38:	f10a 0a01 	add.w	sl, sl, #1
 8002a3c:	9304      	str	r3, [sp, #16]
 8002a3e:	9307      	str	r3, [sp, #28]
 8002a40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a44:	931a      	str	r3, [sp, #104]	; 0x68
 8002a46:	4654      	mov	r4, sl
 8002a48:	2205      	movs	r2, #5
 8002a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a4e:	4858      	ldr	r0, [pc, #352]	; (8002bb0 <_vfiprintf_r+0x24c>)
 8002a50:	f7fd fbce 	bl	80001f0 <memchr>
 8002a54:	9a04      	ldr	r2, [sp, #16]
 8002a56:	b9d8      	cbnz	r0, 8002a90 <_vfiprintf_r+0x12c>
 8002a58:	06d1      	lsls	r1, r2, #27
 8002a5a:	bf44      	itt	mi
 8002a5c:	2320      	movmi	r3, #32
 8002a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a62:	0713      	lsls	r3, r2, #28
 8002a64:	bf44      	itt	mi
 8002a66:	232b      	movmi	r3, #43	; 0x2b
 8002a68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8002a70:	2b2a      	cmp	r3, #42	; 0x2a
 8002a72:	d015      	beq.n	8002aa0 <_vfiprintf_r+0x13c>
 8002a74:	9a07      	ldr	r2, [sp, #28]
 8002a76:	4654      	mov	r4, sl
 8002a78:	2000      	movs	r0, #0
 8002a7a:	f04f 0c0a 	mov.w	ip, #10
 8002a7e:	4621      	mov	r1, r4
 8002a80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a84:	3b30      	subs	r3, #48	; 0x30
 8002a86:	2b09      	cmp	r3, #9
 8002a88:	d94e      	bls.n	8002b28 <_vfiprintf_r+0x1c4>
 8002a8a:	b1b0      	cbz	r0, 8002aba <_vfiprintf_r+0x156>
 8002a8c:	9207      	str	r2, [sp, #28]
 8002a8e:	e014      	b.n	8002aba <_vfiprintf_r+0x156>
 8002a90:	eba0 0308 	sub.w	r3, r0, r8
 8002a94:	fa09 f303 	lsl.w	r3, r9, r3
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	9304      	str	r3, [sp, #16]
 8002a9c:	46a2      	mov	sl, r4
 8002a9e:	e7d2      	b.n	8002a46 <_vfiprintf_r+0xe2>
 8002aa0:	9b03      	ldr	r3, [sp, #12]
 8002aa2:	1d19      	adds	r1, r3, #4
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	9103      	str	r1, [sp, #12]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	bfbb      	ittet	lt
 8002aac:	425b      	neglt	r3, r3
 8002aae:	f042 0202 	orrlt.w	r2, r2, #2
 8002ab2:	9307      	strge	r3, [sp, #28]
 8002ab4:	9307      	strlt	r3, [sp, #28]
 8002ab6:	bfb8      	it	lt
 8002ab8:	9204      	strlt	r2, [sp, #16]
 8002aba:	7823      	ldrb	r3, [r4, #0]
 8002abc:	2b2e      	cmp	r3, #46	; 0x2e
 8002abe:	d10c      	bne.n	8002ada <_vfiprintf_r+0x176>
 8002ac0:	7863      	ldrb	r3, [r4, #1]
 8002ac2:	2b2a      	cmp	r3, #42	; 0x2a
 8002ac4:	d135      	bne.n	8002b32 <_vfiprintf_r+0x1ce>
 8002ac6:	9b03      	ldr	r3, [sp, #12]
 8002ac8:	1d1a      	adds	r2, r3, #4
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	9203      	str	r2, [sp, #12]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	bfb8      	it	lt
 8002ad2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002ad6:	3402      	adds	r4, #2
 8002ad8:	9305      	str	r3, [sp, #20]
 8002ada:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002bc0 <_vfiprintf_r+0x25c>
 8002ade:	7821      	ldrb	r1, [r4, #0]
 8002ae0:	2203      	movs	r2, #3
 8002ae2:	4650      	mov	r0, sl
 8002ae4:	f7fd fb84 	bl	80001f0 <memchr>
 8002ae8:	b140      	cbz	r0, 8002afc <_vfiprintf_r+0x198>
 8002aea:	2340      	movs	r3, #64	; 0x40
 8002aec:	eba0 000a 	sub.w	r0, r0, sl
 8002af0:	fa03 f000 	lsl.w	r0, r3, r0
 8002af4:	9b04      	ldr	r3, [sp, #16]
 8002af6:	4303      	orrs	r3, r0
 8002af8:	3401      	adds	r4, #1
 8002afa:	9304      	str	r3, [sp, #16]
 8002afc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b00:	482c      	ldr	r0, [pc, #176]	; (8002bb4 <_vfiprintf_r+0x250>)
 8002b02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b06:	2206      	movs	r2, #6
 8002b08:	f7fd fb72 	bl	80001f0 <memchr>
 8002b0c:	2800      	cmp	r0, #0
 8002b0e:	d03f      	beq.n	8002b90 <_vfiprintf_r+0x22c>
 8002b10:	4b29      	ldr	r3, [pc, #164]	; (8002bb8 <_vfiprintf_r+0x254>)
 8002b12:	bb1b      	cbnz	r3, 8002b5c <_vfiprintf_r+0x1f8>
 8002b14:	9b03      	ldr	r3, [sp, #12]
 8002b16:	3307      	adds	r3, #7
 8002b18:	f023 0307 	bic.w	r3, r3, #7
 8002b1c:	3308      	adds	r3, #8
 8002b1e:	9303      	str	r3, [sp, #12]
 8002b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b22:	443b      	add	r3, r7
 8002b24:	9309      	str	r3, [sp, #36]	; 0x24
 8002b26:	e767      	b.n	80029f8 <_vfiprintf_r+0x94>
 8002b28:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b2c:	460c      	mov	r4, r1
 8002b2e:	2001      	movs	r0, #1
 8002b30:	e7a5      	b.n	8002a7e <_vfiprintf_r+0x11a>
 8002b32:	2300      	movs	r3, #0
 8002b34:	3401      	adds	r4, #1
 8002b36:	9305      	str	r3, [sp, #20]
 8002b38:	4619      	mov	r1, r3
 8002b3a:	f04f 0c0a 	mov.w	ip, #10
 8002b3e:	4620      	mov	r0, r4
 8002b40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b44:	3a30      	subs	r2, #48	; 0x30
 8002b46:	2a09      	cmp	r2, #9
 8002b48:	d903      	bls.n	8002b52 <_vfiprintf_r+0x1ee>
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0c5      	beq.n	8002ada <_vfiprintf_r+0x176>
 8002b4e:	9105      	str	r1, [sp, #20]
 8002b50:	e7c3      	b.n	8002ada <_vfiprintf_r+0x176>
 8002b52:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b56:	4604      	mov	r4, r0
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e7f0      	b.n	8002b3e <_vfiprintf_r+0x1da>
 8002b5c:	ab03      	add	r3, sp, #12
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	462a      	mov	r2, r5
 8002b62:	4b16      	ldr	r3, [pc, #88]	; (8002bbc <_vfiprintf_r+0x258>)
 8002b64:	a904      	add	r1, sp, #16
 8002b66:	4630      	mov	r0, r6
 8002b68:	f3af 8000 	nop.w
 8002b6c:	4607      	mov	r7, r0
 8002b6e:	1c78      	adds	r0, r7, #1
 8002b70:	d1d6      	bne.n	8002b20 <_vfiprintf_r+0x1bc>
 8002b72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b74:	07d9      	lsls	r1, r3, #31
 8002b76:	d405      	bmi.n	8002b84 <_vfiprintf_r+0x220>
 8002b78:	89ab      	ldrh	r3, [r5, #12]
 8002b7a:	059a      	lsls	r2, r3, #22
 8002b7c:	d402      	bmi.n	8002b84 <_vfiprintf_r+0x220>
 8002b7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b80:	f7ff fe31 	bl	80027e6 <__retarget_lock_release_recursive>
 8002b84:	89ab      	ldrh	r3, [r5, #12]
 8002b86:	065b      	lsls	r3, r3, #25
 8002b88:	f53f af12 	bmi.w	80029b0 <_vfiprintf_r+0x4c>
 8002b8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b8e:	e711      	b.n	80029b4 <_vfiprintf_r+0x50>
 8002b90:	ab03      	add	r3, sp, #12
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	462a      	mov	r2, r5
 8002b96:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <_vfiprintf_r+0x258>)
 8002b98:	a904      	add	r1, sp, #16
 8002b9a:	4630      	mov	r0, r6
 8002b9c:	f000 f880 	bl	8002ca0 <_printf_i>
 8002ba0:	e7e4      	b.n	8002b6c <_vfiprintf_r+0x208>
 8002ba2:	bf00      	nop
 8002ba4:	08003578 	.word	0x08003578
 8002ba8:	08003598 	.word	0x08003598
 8002bac:	08003558 	.word	0x08003558
 8002bb0:	080035b8 	.word	0x080035b8
 8002bb4:	080035c2 	.word	0x080035c2
 8002bb8:	00000000 	.word	0x00000000
 8002bbc:	0800293f 	.word	0x0800293f
 8002bc0:	080035be 	.word	0x080035be

08002bc4 <_printf_common>:
 8002bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bc8:	4616      	mov	r6, r2
 8002bca:	4699      	mov	r9, r3
 8002bcc:	688a      	ldr	r2, [r1, #8]
 8002bce:	690b      	ldr	r3, [r1, #16]
 8002bd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	bfb8      	it	lt
 8002bd8:	4613      	movlt	r3, r2
 8002bda:	6033      	str	r3, [r6, #0]
 8002bdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002be0:	4607      	mov	r7, r0
 8002be2:	460c      	mov	r4, r1
 8002be4:	b10a      	cbz	r2, 8002bea <_printf_common+0x26>
 8002be6:	3301      	adds	r3, #1
 8002be8:	6033      	str	r3, [r6, #0]
 8002bea:	6823      	ldr	r3, [r4, #0]
 8002bec:	0699      	lsls	r1, r3, #26
 8002bee:	bf42      	ittt	mi
 8002bf0:	6833      	ldrmi	r3, [r6, #0]
 8002bf2:	3302      	addmi	r3, #2
 8002bf4:	6033      	strmi	r3, [r6, #0]
 8002bf6:	6825      	ldr	r5, [r4, #0]
 8002bf8:	f015 0506 	ands.w	r5, r5, #6
 8002bfc:	d106      	bne.n	8002c0c <_printf_common+0x48>
 8002bfe:	f104 0a19 	add.w	sl, r4, #25
 8002c02:	68e3      	ldr	r3, [r4, #12]
 8002c04:	6832      	ldr	r2, [r6, #0]
 8002c06:	1a9b      	subs	r3, r3, r2
 8002c08:	42ab      	cmp	r3, r5
 8002c0a:	dc26      	bgt.n	8002c5a <_printf_common+0x96>
 8002c0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c10:	1e13      	subs	r3, r2, #0
 8002c12:	6822      	ldr	r2, [r4, #0]
 8002c14:	bf18      	it	ne
 8002c16:	2301      	movne	r3, #1
 8002c18:	0692      	lsls	r2, r2, #26
 8002c1a:	d42b      	bmi.n	8002c74 <_printf_common+0xb0>
 8002c1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c20:	4649      	mov	r1, r9
 8002c22:	4638      	mov	r0, r7
 8002c24:	47c0      	blx	r8
 8002c26:	3001      	adds	r0, #1
 8002c28:	d01e      	beq.n	8002c68 <_printf_common+0xa4>
 8002c2a:	6823      	ldr	r3, [r4, #0]
 8002c2c:	68e5      	ldr	r5, [r4, #12]
 8002c2e:	6832      	ldr	r2, [r6, #0]
 8002c30:	f003 0306 	and.w	r3, r3, #6
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	bf08      	it	eq
 8002c38:	1aad      	subeq	r5, r5, r2
 8002c3a:	68a3      	ldr	r3, [r4, #8]
 8002c3c:	6922      	ldr	r2, [r4, #16]
 8002c3e:	bf0c      	ite	eq
 8002c40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c44:	2500      	movne	r5, #0
 8002c46:	4293      	cmp	r3, r2
 8002c48:	bfc4      	itt	gt
 8002c4a:	1a9b      	subgt	r3, r3, r2
 8002c4c:	18ed      	addgt	r5, r5, r3
 8002c4e:	2600      	movs	r6, #0
 8002c50:	341a      	adds	r4, #26
 8002c52:	42b5      	cmp	r5, r6
 8002c54:	d11a      	bne.n	8002c8c <_printf_common+0xc8>
 8002c56:	2000      	movs	r0, #0
 8002c58:	e008      	b.n	8002c6c <_printf_common+0xa8>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	4649      	mov	r1, r9
 8002c60:	4638      	mov	r0, r7
 8002c62:	47c0      	blx	r8
 8002c64:	3001      	adds	r0, #1
 8002c66:	d103      	bne.n	8002c70 <_printf_common+0xac>
 8002c68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c70:	3501      	adds	r5, #1
 8002c72:	e7c6      	b.n	8002c02 <_printf_common+0x3e>
 8002c74:	18e1      	adds	r1, r4, r3
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	2030      	movs	r0, #48	; 0x30
 8002c7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c7e:	4422      	add	r2, r4
 8002c80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c88:	3302      	adds	r3, #2
 8002c8a:	e7c7      	b.n	8002c1c <_printf_common+0x58>
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	4622      	mov	r2, r4
 8002c90:	4649      	mov	r1, r9
 8002c92:	4638      	mov	r0, r7
 8002c94:	47c0      	blx	r8
 8002c96:	3001      	adds	r0, #1
 8002c98:	d0e6      	beq.n	8002c68 <_printf_common+0xa4>
 8002c9a:	3601      	adds	r6, #1
 8002c9c:	e7d9      	b.n	8002c52 <_printf_common+0x8e>
	...

08002ca0 <_printf_i>:
 8002ca0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ca4:	7e0f      	ldrb	r7, [r1, #24]
 8002ca6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002ca8:	2f78      	cmp	r7, #120	; 0x78
 8002caa:	4691      	mov	r9, r2
 8002cac:	4680      	mov	r8, r0
 8002cae:	460c      	mov	r4, r1
 8002cb0:	469a      	mov	sl, r3
 8002cb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002cb6:	d807      	bhi.n	8002cc8 <_printf_i+0x28>
 8002cb8:	2f62      	cmp	r7, #98	; 0x62
 8002cba:	d80a      	bhi.n	8002cd2 <_printf_i+0x32>
 8002cbc:	2f00      	cmp	r7, #0
 8002cbe:	f000 80d8 	beq.w	8002e72 <_printf_i+0x1d2>
 8002cc2:	2f58      	cmp	r7, #88	; 0x58
 8002cc4:	f000 80a3 	beq.w	8002e0e <_printf_i+0x16e>
 8002cc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ccc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002cd0:	e03a      	b.n	8002d48 <_printf_i+0xa8>
 8002cd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002cd6:	2b15      	cmp	r3, #21
 8002cd8:	d8f6      	bhi.n	8002cc8 <_printf_i+0x28>
 8002cda:	a101      	add	r1, pc, #4	; (adr r1, 8002ce0 <_printf_i+0x40>)
 8002cdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002ce0:	08002d39 	.word	0x08002d39
 8002ce4:	08002d4d 	.word	0x08002d4d
 8002ce8:	08002cc9 	.word	0x08002cc9
 8002cec:	08002cc9 	.word	0x08002cc9
 8002cf0:	08002cc9 	.word	0x08002cc9
 8002cf4:	08002cc9 	.word	0x08002cc9
 8002cf8:	08002d4d 	.word	0x08002d4d
 8002cfc:	08002cc9 	.word	0x08002cc9
 8002d00:	08002cc9 	.word	0x08002cc9
 8002d04:	08002cc9 	.word	0x08002cc9
 8002d08:	08002cc9 	.word	0x08002cc9
 8002d0c:	08002e59 	.word	0x08002e59
 8002d10:	08002d7d 	.word	0x08002d7d
 8002d14:	08002e3b 	.word	0x08002e3b
 8002d18:	08002cc9 	.word	0x08002cc9
 8002d1c:	08002cc9 	.word	0x08002cc9
 8002d20:	08002e7b 	.word	0x08002e7b
 8002d24:	08002cc9 	.word	0x08002cc9
 8002d28:	08002d7d 	.word	0x08002d7d
 8002d2c:	08002cc9 	.word	0x08002cc9
 8002d30:	08002cc9 	.word	0x08002cc9
 8002d34:	08002e43 	.word	0x08002e43
 8002d38:	682b      	ldr	r3, [r5, #0]
 8002d3a:	1d1a      	adds	r2, r3, #4
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	602a      	str	r2, [r5, #0]
 8002d40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e0a3      	b.n	8002e94 <_printf_i+0x1f4>
 8002d4c:	6820      	ldr	r0, [r4, #0]
 8002d4e:	6829      	ldr	r1, [r5, #0]
 8002d50:	0606      	lsls	r6, r0, #24
 8002d52:	f101 0304 	add.w	r3, r1, #4
 8002d56:	d50a      	bpl.n	8002d6e <_printf_i+0xce>
 8002d58:	680e      	ldr	r6, [r1, #0]
 8002d5a:	602b      	str	r3, [r5, #0]
 8002d5c:	2e00      	cmp	r6, #0
 8002d5e:	da03      	bge.n	8002d68 <_printf_i+0xc8>
 8002d60:	232d      	movs	r3, #45	; 0x2d
 8002d62:	4276      	negs	r6, r6
 8002d64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d68:	485e      	ldr	r0, [pc, #376]	; (8002ee4 <_printf_i+0x244>)
 8002d6a:	230a      	movs	r3, #10
 8002d6c:	e019      	b.n	8002da2 <_printf_i+0x102>
 8002d6e:	680e      	ldr	r6, [r1, #0]
 8002d70:	602b      	str	r3, [r5, #0]
 8002d72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002d76:	bf18      	it	ne
 8002d78:	b236      	sxthne	r6, r6
 8002d7a:	e7ef      	b.n	8002d5c <_printf_i+0xbc>
 8002d7c:	682b      	ldr	r3, [r5, #0]
 8002d7e:	6820      	ldr	r0, [r4, #0]
 8002d80:	1d19      	adds	r1, r3, #4
 8002d82:	6029      	str	r1, [r5, #0]
 8002d84:	0601      	lsls	r1, r0, #24
 8002d86:	d501      	bpl.n	8002d8c <_printf_i+0xec>
 8002d88:	681e      	ldr	r6, [r3, #0]
 8002d8a:	e002      	b.n	8002d92 <_printf_i+0xf2>
 8002d8c:	0646      	lsls	r6, r0, #25
 8002d8e:	d5fb      	bpl.n	8002d88 <_printf_i+0xe8>
 8002d90:	881e      	ldrh	r6, [r3, #0]
 8002d92:	4854      	ldr	r0, [pc, #336]	; (8002ee4 <_printf_i+0x244>)
 8002d94:	2f6f      	cmp	r7, #111	; 0x6f
 8002d96:	bf0c      	ite	eq
 8002d98:	2308      	moveq	r3, #8
 8002d9a:	230a      	movne	r3, #10
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002da2:	6865      	ldr	r5, [r4, #4]
 8002da4:	60a5      	str	r5, [r4, #8]
 8002da6:	2d00      	cmp	r5, #0
 8002da8:	bfa2      	ittt	ge
 8002daa:	6821      	ldrge	r1, [r4, #0]
 8002dac:	f021 0104 	bicge.w	r1, r1, #4
 8002db0:	6021      	strge	r1, [r4, #0]
 8002db2:	b90e      	cbnz	r6, 8002db8 <_printf_i+0x118>
 8002db4:	2d00      	cmp	r5, #0
 8002db6:	d04d      	beq.n	8002e54 <_printf_i+0x1b4>
 8002db8:	4615      	mov	r5, r2
 8002dba:	fbb6 f1f3 	udiv	r1, r6, r3
 8002dbe:	fb03 6711 	mls	r7, r3, r1, r6
 8002dc2:	5dc7      	ldrb	r7, [r0, r7]
 8002dc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002dc8:	4637      	mov	r7, r6
 8002dca:	42bb      	cmp	r3, r7
 8002dcc:	460e      	mov	r6, r1
 8002dce:	d9f4      	bls.n	8002dba <_printf_i+0x11a>
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d10b      	bne.n	8002dec <_printf_i+0x14c>
 8002dd4:	6823      	ldr	r3, [r4, #0]
 8002dd6:	07de      	lsls	r6, r3, #31
 8002dd8:	d508      	bpl.n	8002dec <_printf_i+0x14c>
 8002dda:	6923      	ldr	r3, [r4, #16]
 8002ddc:	6861      	ldr	r1, [r4, #4]
 8002dde:	4299      	cmp	r1, r3
 8002de0:	bfde      	ittt	le
 8002de2:	2330      	movle	r3, #48	; 0x30
 8002de4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002de8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002dec:	1b52      	subs	r2, r2, r5
 8002dee:	6122      	str	r2, [r4, #16]
 8002df0:	f8cd a000 	str.w	sl, [sp]
 8002df4:	464b      	mov	r3, r9
 8002df6:	aa03      	add	r2, sp, #12
 8002df8:	4621      	mov	r1, r4
 8002dfa:	4640      	mov	r0, r8
 8002dfc:	f7ff fee2 	bl	8002bc4 <_printf_common>
 8002e00:	3001      	adds	r0, #1
 8002e02:	d14c      	bne.n	8002e9e <_printf_i+0x1fe>
 8002e04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e08:	b004      	add	sp, #16
 8002e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e0e:	4835      	ldr	r0, [pc, #212]	; (8002ee4 <_printf_i+0x244>)
 8002e10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002e14:	6829      	ldr	r1, [r5, #0]
 8002e16:	6823      	ldr	r3, [r4, #0]
 8002e18:	f851 6b04 	ldr.w	r6, [r1], #4
 8002e1c:	6029      	str	r1, [r5, #0]
 8002e1e:	061d      	lsls	r5, r3, #24
 8002e20:	d514      	bpl.n	8002e4c <_printf_i+0x1ac>
 8002e22:	07df      	lsls	r7, r3, #31
 8002e24:	bf44      	itt	mi
 8002e26:	f043 0320 	orrmi.w	r3, r3, #32
 8002e2a:	6023      	strmi	r3, [r4, #0]
 8002e2c:	b91e      	cbnz	r6, 8002e36 <_printf_i+0x196>
 8002e2e:	6823      	ldr	r3, [r4, #0]
 8002e30:	f023 0320 	bic.w	r3, r3, #32
 8002e34:	6023      	str	r3, [r4, #0]
 8002e36:	2310      	movs	r3, #16
 8002e38:	e7b0      	b.n	8002d9c <_printf_i+0xfc>
 8002e3a:	6823      	ldr	r3, [r4, #0]
 8002e3c:	f043 0320 	orr.w	r3, r3, #32
 8002e40:	6023      	str	r3, [r4, #0]
 8002e42:	2378      	movs	r3, #120	; 0x78
 8002e44:	4828      	ldr	r0, [pc, #160]	; (8002ee8 <_printf_i+0x248>)
 8002e46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002e4a:	e7e3      	b.n	8002e14 <_printf_i+0x174>
 8002e4c:	0659      	lsls	r1, r3, #25
 8002e4e:	bf48      	it	mi
 8002e50:	b2b6      	uxthmi	r6, r6
 8002e52:	e7e6      	b.n	8002e22 <_printf_i+0x182>
 8002e54:	4615      	mov	r5, r2
 8002e56:	e7bb      	b.n	8002dd0 <_printf_i+0x130>
 8002e58:	682b      	ldr	r3, [r5, #0]
 8002e5a:	6826      	ldr	r6, [r4, #0]
 8002e5c:	6961      	ldr	r1, [r4, #20]
 8002e5e:	1d18      	adds	r0, r3, #4
 8002e60:	6028      	str	r0, [r5, #0]
 8002e62:	0635      	lsls	r5, r6, #24
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	d501      	bpl.n	8002e6c <_printf_i+0x1cc>
 8002e68:	6019      	str	r1, [r3, #0]
 8002e6a:	e002      	b.n	8002e72 <_printf_i+0x1d2>
 8002e6c:	0670      	lsls	r0, r6, #25
 8002e6e:	d5fb      	bpl.n	8002e68 <_printf_i+0x1c8>
 8002e70:	8019      	strh	r1, [r3, #0]
 8002e72:	2300      	movs	r3, #0
 8002e74:	6123      	str	r3, [r4, #16]
 8002e76:	4615      	mov	r5, r2
 8002e78:	e7ba      	b.n	8002df0 <_printf_i+0x150>
 8002e7a:	682b      	ldr	r3, [r5, #0]
 8002e7c:	1d1a      	adds	r2, r3, #4
 8002e7e:	602a      	str	r2, [r5, #0]
 8002e80:	681d      	ldr	r5, [r3, #0]
 8002e82:	6862      	ldr	r2, [r4, #4]
 8002e84:	2100      	movs	r1, #0
 8002e86:	4628      	mov	r0, r5
 8002e88:	f7fd f9b2 	bl	80001f0 <memchr>
 8002e8c:	b108      	cbz	r0, 8002e92 <_printf_i+0x1f2>
 8002e8e:	1b40      	subs	r0, r0, r5
 8002e90:	6060      	str	r0, [r4, #4]
 8002e92:	6863      	ldr	r3, [r4, #4]
 8002e94:	6123      	str	r3, [r4, #16]
 8002e96:	2300      	movs	r3, #0
 8002e98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e9c:	e7a8      	b.n	8002df0 <_printf_i+0x150>
 8002e9e:	6923      	ldr	r3, [r4, #16]
 8002ea0:	462a      	mov	r2, r5
 8002ea2:	4649      	mov	r1, r9
 8002ea4:	4640      	mov	r0, r8
 8002ea6:	47d0      	blx	sl
 8002ea8:	3001      	adds	r0, #1
 8002eaa:	d0ab      	beq.n	8002e04 <_printf_i+0x164>
 8002eac:	6823      	ldr	r3, [r4, #0]
 8002eae:	079b      	lsls	r3, r3, #30
 8002eb0:	d413      	bmi.n	8002eda <_printf_i+0x23a>
 8002eb2:	68e0      	ldr	r0, [r4, #12]
 8002eb4:	9b03      	ldr	r3, [sp, #12]
 8002eb6:	4298      	cmp	r0, r3
 8002eb8:	bfb8      	it	lt
 8002eba:	4618      	movlt	r0, r3
 8002ebc:	e7a4      	b.n	8002e08 <_printf_i+0x168>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	4632      	mov	r2, r6
 8002ec2:	4649      	mov	r1, r9
 8002ec4:	4640      	mov	r0, r8
 8002ec6:	47d0      	blx	sl
 8002ec8:	3001      	adds	r0, #1
 8002eca:	d09b      	beq.n	8002e04 <_printf_i+0x164>
 8002ecc:	3501      	adds	r5, #1
 8002ece:	68e3      	ldr	r3, [r4, #12]
 8002ed0:	9903      	ldr	r1, [sp, #12]
 8002ed2:	1a5b      	subs	r3, r3, r1
 8002ed4:	42ab      	cmp	r3, r5
 8002ed6:	dcf2      	bgt.n	8002ebe <_printf_i+0x21e>
 8002ed8:	e7eb      	b.n	8002eb2 <_printf_i+0x212>
 8002eda:	2500      	movs	r5, #0
 8002edc:	f104 0619 	add.w	r6, r4, #25
 8002ee0:	e7f5      	b.n	8002ece <_printf_i+0x22e>
 8002ee2:	bf00      	nop
 8002ee4:	080035c9 	.word	0x080035c9
 8002ee8:	080035da 	.word	0x080035da

08002eec <_sbrk_r>:
 8002eec:	b538      	push	{r3, r4, r5, lr}
 8002eee:	4d06      	ldr	r5, [pc, #24]	; (8002f08 <_sbrk_r+0x1c>)
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	4604      	mov	r4, r0
 8002ef4:	4608      	mov	r0, r1
 8002ef6:	602b      	str	r3, [r5, #0]
 8002ef8:	f7fd fd28 	bl	800094c <_sbrk>
 8002efc:	1c43      	adds	r3, r0, #1
 8002efe:	d102      	bne.n	8002f06 <_sbrk_r+0x1a>
 8002f00:	682b      	ldr	r3, [r5, #0]
 8002f02:	b103      	cbz	r3, 8002f06 <_sbrk_r+0x1a>
 8002f04:	6023      	str	r3, [r4, #0]
 8002f06:	bd38      	pop	{r3, r4, r5, pc}
 8002f08:	200000f0 	.word	0x200000f0

08002f0c <__sread>:
 8002f0c:	b510      	push	{r4, lr}
 8002f0e:	460c      	mov	r4, r1
 8002f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f14:	f000 fab2 	bl	800347c <_read_r>
 8002f18:	2800      	cmp	r0, #0
 8002f1a:	bfab      	itete	ge
 8002f1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002f1e:	89a3      	ldrhlt	r3, [r4, #12]
 8002f20:	181b      	addge	r3, r3, r0
 8002f22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002f26:	bfac      	ite	ge
 8002f28:	6563      	strge	r3, [r4, #84]	; 0x54
 8002f2a:	81a3      	strhlt	r3, [r4, #12]
 8002f2c:	bd10      	pop	{r4, pc}

08002f2e <__swrite>:
 8002f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f32:	461f      	mov	r7, r3
 8002f34:	898b      	ldrh	r3, [r1, #12]
 8002f36:	05db      	lsls	r3, r3, #23
 8002f38:	4605      	mov	r5, r0
 8002f3a:	460c      	mov	r4, r1
 8002f3c:	4616      	mov	r6, r2
 8002f3e:	d505      	bpl.n	8002f4c <__swrite+0x1e>
 8002f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f44:	2302      	movs	r3, #2
 8002f46:	2200      	movs	r2, #0
 8002f48:	f000 f9c8 	bl	80032dc <_lseek_r>
 8002f4c:	89a3      	ldrh	r3, [r4, #12]
 8002f4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f56:	81a3      	strh	r3, [r4, #12]
 8002f58:	4632      	mov	r2, r6
 8002f5a:	463b      	mov	r3, r7
 8002f5c:	4628      	mov	r0, r5
 8002f5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f62:	f000 b869 	b.w	8003038 <_write_r>

08002f66 <__sseek>:
 8002f66:	b510      	push	{r4, lr}
 8002f68:	460c      	mov	r4, r1
 8002f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f6e:	f000 f9b5 	bl	80032dc <_lseek_r>
 8002f72:	1c43      	adds	r3, r0, #1
 8002f74:	89a3      	ldrh	r3, [r4, #12]
 8002f76:	bf15      	itete	ne
 8002f78:	6560      	strne	r0, [r4, #84]	; 0x54
 8002f7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002f7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002f82:	81a3      	strheq	r3, [r4, #12]
 8002f84:	bf18      	it	ne
 8002f86:	81a3      	strhne	r3, [r4, #12]
 8002f88:	bd10      	pop	{r4, pc}

08002f8a <__sclose>:
 8002f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f8e:	f000 b8d3 	b.w	8003138 <_close_r>
	...

08002f94 <__swbuf_r>:
 8002f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f96:	460e      	mov	r6, r1
 8002f98:	4614      	mov	r4, r2
 8002f9a:	4605      	mov	r5, r0
 8002f9c:	b118      	cbz	r0, 8002fa6 <__swbuf_r+0x12>
 8002f9e:	6983      	ldr	r3, [r0, #24]
 8002fa0:	b90b      	cbnz	r3, 8002fa6 <__swbuf_r+0x12>
 8002fa2:	f7ff fb81 	bl	80026a8 <__sinit>
 8002fa6:	4b21      	ldr	r3, [pc, #132]	; (800302c <__swbuf_r+0x98>)
 8002fa8:	429c      	cmp	r4, r3
 8002faa:	d12b      	bne.n	8003004 <__swbuf_r+0x70>
 8002fac:	686c      	ldr	r4, [r5, #4]
 8002fae:	69a3      	ldr	r3, [r4, #24]
 8002fb0:	60a3      	str	r3, [r4, #8]
 8002fb2:	89a3      	ldrh	r3, [r4, #12]
 8002fb4:	071a      	lsls	r2, r3, #28
 8002fb6:	d52f      	bpl.n	8003018 <__swbuf_r+0x84>
 8002fb8:	6923      	ldr	r3, [r4, #16]
 8002fba:	b36b      	cbz	r3, 8003018 <__swbuf_r+0x84>
 8002fbc:	6923      	ldr	r3, [r4, #16]
 8002fbe:	6820      	ldr	r0, [r4, #0]
 8002fc0:	1ac0      	subs	r0, r0, r3
 8002fc2:	6963      	ldr	r3, [r4, #20]
 8002fc4:	b2f6      	uxtb	r6, r6
 8002fc6:	4283      	cmp	r3, r0
 8002fc8:	4637      	mov	r7, r6
 8002fca:	dc04      	bgt.n	8002fd6 <__swbuf_r+0x42>
 8002fcc:	4621      	mov	r1, r4
 8002fce:	4628      	mov	r0, r5
 8002fd0:	f000 f948 	bl	8003264 <_fflush_r>
 8002fd4:	bb30      	cbnz	r0, 8003024 <__swbuf_r+0x90>
 8002fd6:	68a3      	ldr	r3, [r4, #8]
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	60a3      	str	r3, [r4, #8]
 8002fdc:	6823      	ldr	r3, [r4, #0]
 8002fde:	1c5a      	adds	r2, r3, #1
 8002fe0:	6022      	str	r2, [r4, #0]
 8002fe2:	701e      	strb	r6, [r3, #0]
 8002fe4:	6963      	ldr	r3, [r4, #20]
 8002fe6:	3001      	adds	r0, #1
 8002fe8:	4283      	cmp	r3, r0
 8002fea:	d004      	beq.n	8002ff6 <__swbuf_r+0x62>
 8002fec:	89a3      	ldrh	r3, [r4, #12]
 8002fee:	07db      	lsls	r3, r3, #31
 8002ff0:	d506      	bpl.n	8003000 <__swbuf_r+0x6c>
 8002ff2:	2e0a      	cmp	r6, #10
 8002ff4:	d104      	bne.n	8003000 <__swbuf_r+0x6c>
 8002ff6:	4621      	mov	r1, r4
 8002ff8:	4628      	mov	r0, r5
 8002ffa:	f000 f933 	bl	8003264 <_fflush_r>
 8002ffe:	b988      	cbnz	r0, 8003024 <__swbuf_r+0x90>
 8003000:	4638      	mov	r0, r7
 8003002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003004:	4b0a      	ldr	r3, [pc, #40]	; (8003030 <__swbuf_r+0x9c>)
 8003006:	429c      	cmp	r4, r3
 8003008:	d101      	bne.n	800300e <__swbuf_r+0x7a>
 800300a:	68ac      	ldr	r4, [r5, #8]
 800300c:	e7cf      	b.n	8002fae <__swbuf_r+0x1a>
 800300e:	4b09      	ldr	r3, [pc, #36]	; (8003034 <__swbuf_r+0xa0>)
 8003010:	429c      	cmp	r4, r3
 8003012:	bf08      	it	eq
 8003014:	68ec      	ldreq	r4, [r5, #12]
 8003016:	e7ca      	b.n	8002fae <__swbuf_r+0x1a>
 8003018:	4621      	mov	r1, r4
 800301a:	4628      	mov	r0, r5
 800301c:	f000 f81e 	bl	800305c <__swsetup_r>
 8003020:	2800      	cmp	r0, #0
 8003022:	d0cb      	beq.n	8002fbc <__swbuf_r+0x28>
 8003024:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003028:	e7ea      	b.n	8003000 <__swbuf_r+0x6c>
 800302a:	bf00      	nop
 800302c:	08003578 	.word	0x08003578
 8003030:	08003598 	.word	0x08003598
 8003034:	08003558 	.word	0x08003558

08003038 <_write_r>:
 8003038:	b538      	push	{r3, r4, r5, lr}
 800303a:	4d07      	ldr	r5, [pc, #28]	; (8003058 <_write_r+0x20>)
 800303c:	4604      	mov	r4, r0
 800303e:	4608      	mov	r0, r1
 8003040:	4611      	mov	r1, r2
 8003042:	2200      	movs	r2, #0
 8003044:	602a      	str	r2, [r5, #0]
 8003046:	461a      	mov	r2, r3
 8003048:	f7fd fc2f 	bl	80008aa <_write>
 800304c:	1c43      	adds	r3, r0, #1
 800304e:	d102      	bne.n	8003056 <_write_r+0x1e>
 8003050:	682b      	ldr	r3, [r5, #0]
 8003052:	b103      	cbz	r3, 8003056 <_write_r+0x1e>
 8003054:	6023      	str	r3, [r4, #0]
 8003056:	bd38      	pop	{r3, r4, r5, pc}
 8003058:	200000f0 	.word	0x200000f0

0800305c <__swsetup_r>:
 800305c:	4b32      	ldr	r3, [pc, #200]	; (8003128 <__swsetup_r+0xcc>)
 800305e:	b570      	push	{r4, r5, r6, lr}
 8003060:	681d      	ldr	r5, [r3, #0]
 8003062:	4606      	mov	r6, r0
 8003064:	460c      	mov	r4, r1
 8003066:	b125      	cbz	r5, 8003072 <__swsetup_r+0x16>
 8003068:	69ab      	ldr	r3, [r5, #24]
 800306a:	b913      	cbnz	r3, 8003072 <__swsetup_r+0x16>
 800306c:	4628      	mov	r0, r5
 800306e:	f7ff fb1b 	bl	80026a8 <__sinit>
 8003072:	4b2e      	ldr	r3, [pc, #184]	; (800312c <__swsetup_r+0xd0>)
 8003074:	429c      	cmp	r4, r3
 8003076:	d10f      	bne.n	8003098 <__swsetup_r+0x3c>
 8003078:	686c      	ldr	r4, [r5, #4]
 800307a:	89a3      	ldrh	r3, [r4, #12]
 800307c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003080:	0719      	lsls	r1, r3, #28
 8003082:	d42c      	bmi.n	80030de <__swsetup_r+0x82>
 8003084:	06dd      	lsls	r5, r3, #27
 8003086:	d411      	bmi.n	80030ac <__swsetup_r+0x50>
 8003088:	2309      	movs	r3, #9
 800308a:	6033      	str	r3, [r6, #0]
 800308c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003090:	81a3      	strh	r3, [r4, #12]
 8003092:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003096:	e03e      	b.n	8003116 <__swsetup_r+0xba>
 8003098:	4b25      	ldr	r3, [pc, #148]	; (8003130 <__swsetup_r+0xd4>)
 800309a:	429c      	cmp	r4, r3
 800309c:	d101      	bne.n	80030a2 <__swsetup_r+0x46>
 800309e:	68ac      	ldr	r4, [r5, #8]
 80030a0:	e7eb      	b.n	800307a <__swsetup_r+0x1e>
 80030a2:	4b24      	ldr	r3, [pc, #144]	; (8003134 <__swsetup_r+0xd8>)
 80030a4:	429c      	cmp	r4, r3
 80030a6:	bf08      	it	eq
 80030a8:	68ec      	ldreq	r4, [r5, #12]
 80030aa:	e7e6      	b.n	800307a <__swsetup_r+0x1e>
 80030ac:	0758      	lsls	r0, r3, #29
 80030ae:	d512      	bpl.n	80030d6 <__swsetup_r+0x7a>
 80030b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030b2:	b141      	cbz	r1, 80030c6 <__swsetup_r+0x6a>
 80030b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030b8:	4299      	cmp	r1, r3
 80030ba:	d002      	beq.n	80030c2 <__swsetup_r+0x66>
 80030bc:	4630      	mov	r0, r6
 80030be:	f000 f991 	bl	80033e4 <_free_r>
 80030c2:	2300      	movs	r3, #0
 80030c4:	6363      	str	r3, [r4, #52]	; 0x34
 80030c6:	89a3      	ldrh	r3, [r4, #12]
 80030c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80030cc:	81a3      	strh	r3, [r4, #12]
 80030ce:	2300      	movs	r3, #0
 80030d0:	6063      	str	r3, [r4, #4]
 80030d2:	6923      	ldr	r3, [r4, #16]
 80030d4:	6023      	str	r3, [r4, #0]
 80030d6:	89a3      	ldrh	r3, [r4, #12]
 80030d8:	f043 0308 	orr.w	r3, r3, #8
 80030dc:	81a3      	strh	r3, [r4, #12]
 80030de:	6923      	ldr	r3, [r4, #16]
 80030e0:	b94b      	cbnz	r3, 80030f6 <__swsetup_r+0x9a>
 80030e2:	89a3      	ldrh	r3, [r4, #12]
 80030e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80030e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030ec:	d003      	beq.n	80030f6 <__swsetup_r+0x9a>
 80030ee:	4621      	mov	r1, r4
 80030f0:	4630      	mov	r0, r6
 80030f2:	f000 f92b 	bl	800334c <__smakebuf_r>
 80030f6:	89a0      	ldrh	r0, [r4, #12]
 80030f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80030fc:	f010 0301 	ands.w	r3, r0, #1
 8003100:	d00a      	beq.n	8003118 <__swsetup_r+0xbc>
 8003102:	2300      	movs	r3, #0
 8003104:	60a3      	str	r3, [r4, #8]
 8003106:	6963      	ldr	r3, [r4, #20]
 8003108:	425b      	negs	r3, r3
 800310a:	61a3      	str	r3, [r4, #24]
 800310c:	6923      	ldr	r3, [r4, #16]
 800310e:	b943      	cbnz	r3, 8003122 <__swsetup_r+0xc6>
 8003110:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003114:	d1ba      	bne.n	800308c <__swsetup_r+0x30>
 8003116:	bd70      	pop	{r4, r5, r6, pc}
 8003118:	0781      	lsls	r1, r0, #30
 800311a:	bf58      	it	pl
 800311c:	6963      	ldrpl	r3, [r4, #20]
 800311e:	60a3      	str	r3, [r4, #8]
 8003120:	e7f4      	b.n	800310c <__swsetup_r+0xb0>
 8003122:	2000      	movs	r0, #0
 8003124:	e7f7      	b.n	8003116 <__swsetup_r+0xba>
 8003126:	bf00      	nop
 8003128:	20000018 	.word	0x20000018
 800312c:	08003578 	.word	0x08003578
 8003130:	08003598 	.word	0x08003598
 8003134:	08003558 	.word	0x08003558

08003138 <_close_r>:
 8003138:	b538      	push	{r3, r4, r5, lr}
 800313a:	4d06      	ldr	r5, [pc, #24]	; (8003154 <_close_r+0x1c>)
 800313c:	2300      	movs	r3, #0
 800313e:	4604      	mov	r4, r0
 8003140:	4608      	mov	r0, r1
 8003142:	602b      	str	r3, [r5, #0]
 8003144:	f7fd fbcd 	bl	80008e2 <_close>
 8003148:	1c43      	adds	r3, r0, #1
 800314a:	d102      	bne.n	8003152 <_close_r+0x1a>
 800314c:	682b      	ldr	r3, [r5, #0]
 800314e:	b103      	cbz	r3, 8003152 <_close_r+0x1a>
 8003150:	6023      	str	r3, [r4, #0]
 8003152:	bd38      	pop	{r3, r4, r5, pc}
 8003154:	200000f0 	.word	0x200000f0

08003158 <__sflush_r>:
 8003158:	898a      	ldrh	r2, [r1, #12]
 800315a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800315e:	4605      	mov	r5, r0
 8003160:	0710      	lsls	r0, r2, #28
 8003162:	460c      	mov	r4, r1
 8003164:	d458      	bmi.n	8003218 <__sflush_r+0xc0>
 8003166:	684b      	ldr	r3, [r1, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	dc05      	bgt.n	8003178 <__sflush_r+0x20>
 800316c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800316e:	2b00      	cmp	r3, #0
 8003170:	dc02      	bgt.n	8003178 <__sflush_r+0x20>
 8003172:	2000      	movs	r0, #0
 8003174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003178:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800317a:	2e00      	cmp	r6, #0
 800317c:	d0f9      	beq.n	8003172 <__sflush_r+0x1a>
 800317e:	2300      	movs	r3, #0
 8003180:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003184:	682f      	ldr	r7, [r5, #0]
 8003186:	602b      	str	r3, [r5, #0]
 8003188:	d032      	beq.n	80031f0 <__sflush_r+0x98>
 800318a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800318c:	89a3      	ldrh	r3, [r4, #12]
 800318e:	075a      	lsls	r2, r3, #29
 8003190:	d505      	bpl.n	800319e <__sflush_r+0x46>
 8003192:	6863      	ldr	r3, [r4, #4]
 8003194:	1ac0      	subs	r0, r0, r3
 8003196:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003198:	b10b      	cbz	r3, 800319e <__sflush_r+0x46>
 800319a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800319c:	1ac0      	subs	r0, r0, r3
 800319e:	2300      	movs	r3, #0
 80031a0:	4602      	mov	r2, r0
 80031a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80031a4:	6a21      	ldr	r1, [r4, #32]
 80031a6:	4628      	mov	r0, r5
 80031a8:	47b0      	blx	r6
 80031aa:	1c43      	adds	r3, r0, #1
 80031ac:	89a3      	ldrh	r3, [r4, #12]
 80031ae:	d106      	bne.n	80031be <__sflush_r+0x66>
 80031b0:	6829      	ldr	r1, [r5, #0]
 80031b2:	291d      	cmp	r1, #29
 80031b4:	d82c      	bhi.n	8003210 <__sflush_r+0xb8>
 80031b6:	4a2a      	ldr	r2, [pc, #168]	; (8003260 <__sflush_r+0x108>)
 80031b8:	40ca      	lsrs	r2, r1
 80031ba:	07d6      	lsls	r6, r2, #31
 80031bc:	d528      	bpl.n	8003210 <__sflush_r+0xb8>
 80031be:	2200      	movs	r2, #0
 80031c0:	6062      	str	r2, [r4, #4]
 80031c2:	04d9      	lsls	r1, r3, #19
 80031c4:	6922      	ldr	r2, [r4, #16]
 80031c6:	6022      	str	r2, [r4, #0]
 80031c8:	d504      	bpl.n	80031d4 <__sflush_r+0x7c>
 80031ca:	1c42      	adds	r2, r0, #1
 80031cc:	d101      	bne.n	80031d2 <__sflush_r+0x7a>
 80031ce:	682b      	ldr	r3, [r5, #0]
 80031d0:	b903      	cbnz	r3, 80031d4 <__sflush_r+0x7c>
 80031d2:	6560      	str	r0, [r4, #84]	; 0x54
 80031d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031d6:	602f      	str	r7, [r5, #0]
 80031d8:	2900      	cmp	r1, #0
 80031da:	d0ca      	beq.n	8003172 <__sflush_r+0x1a>
 80031dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80031e0:	4299      	cmp	r1, r3
 80031e2:	d002      	beq.n	80031ea <__sflush_r+0x92>
 80031e4:	4628      	mov	r0, r5
 80031e6:	f000 f8fd 	bl	80033e4 <_free_r>
 80031ea:	2000      	movs	r0, #0
 80031ec:	6360      	str	r0, [r4, #52]	; 0x34
 80031ee:	e7c1      	b.n	8003174 <__sflush_r+0x1c>
 80031f0:	6a21      	ldr	r1, [r4, #32]
 80031f2:	2301      	movs	r3, #1
 80031f4:	4628      	mov	r0, r5
 80031f6:	47b0      	blx	r6
 80031f8:	1c41      	adds	r1, r0, #1
 80031fa:	d1c7      	bne.n	800318c <__sflush_r+0x34>
 80031fc:	682b      	ldr	r3, [r5, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0c4      	beq.n	800318c <__sflush_r+0x34>
 8003202:	2b1d      	cmp	r3, #29
 8003204:	d001      	beq.n	800320a <__sflush_r+0xb2>
 8003206:	2b16      	cmp	r3, #22
 8003208:	d101      	bne.n	800320e <__sflush_r+0xb6>
 800320a:	602f      	str	r7, [r5, #0]
 800320c:	e7b1      	b.n	8003172 <__sflush_r+0x1a>
 800320e:	89a3      	ldrh	r3, [r4, #12]
 8003210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003214:	81a3      	strh	r3, [r4, #12]
 8003216:	e7ad      	b.n	8003174 <__sflush_r+0x1c>
 8003218:	690f      	ldr	r7, [r1, #16]
 800321a:	2f00      	cmp	r7, #0
 800321c:	d0a9      	beq.n	8003172 <__sflush_r+0x1a>
 800321e:	0793      	lsls	r3, r2, #30
 8003220:	680e      	ldr	r6, [r1, #0]
 8003222:	bf08      	it	eq
 8003224:	694b      	ldreq	r3, [r1, #20]
 8003226:	600f      	str	r7, [r1, #0]
 8003228:	bf18      	it	ne
 800322a:	2300      	movne	r3, #0
 800322c:	eba6 0807 	sub.w	r8, r6, r7
 8003230:	608b      	str	r3, [r1, #8]
 8003232:	f1b8 0f00 	cmp.w	r8, #0
 8003236:	dd9c      	ble.n	8003172 <__sflush_r+0x1a>
 8003238:	6a21      	ldr	r1, [r4, #32]
 800323a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800323c:	4643      	mov	r3, r8
 800323e:	463a      	mov	r2, r7
 8003240:	4628      	mov	r0, r5
 8003242:	47b0      	blx	r6
 8003244:	2800      	cmp	r0, #0
 8003246:	dc06      	bgt.n	8003256 <__sflush_r+0xfe>
 8003248:	89a3      	ldrh	r3, [r4, #12]
 800324a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800324e:	81a3      	strh	r3, [r4, #12]
 8003250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003254:	e78e      	b.n	8003174 <__sflush_r+0x1c>
 8003256:	4407      	add	r7, r0
 8003258:	eba8 0800 	sub.w	r8, r8, r0
 800325c:	e7e9      	b.n	8003232 <__sflush_r+0xda>
 800325e:	bf00      	nop
 8003260:	20400001 	.word	0x20400001

08003264 <_fflush_r>:
 8003264:	b538      	push	{r3, r4, r5, lr}
 8003266:	690b      	ldr	r3, [r1, #16]
 8003268:	4605      	mov	r5, r0
 800326a:	460c      	mov	r4, r1
 800326c:	b913      	cbnz	r3, 8003274 <_fflush_r+0x10>
 800326e:	2500      	movs	r5, #0
 8003270:	4628      	mov	r0, r5
 8003272:	bd38      	pop	{r3, r4, r5, pc}
 8003274:	b118      	cbz	r0, 800327e <_fflush_r+0x1a>
 8003276:	6983      	ldr	r3, [r0, #24]
 8003278:	b90b      	cbnz	r3, 800327e <_fflush_r+0x1a>
 800327a:	f7ff fa15 	bl	80026a8 <__sinit>
 800327e:	4b14      	ldr	r3, [pc, #80]	; (80032d0 <_fflush_r+0x6c>)
 8003280:	429c      	cmp	r4, r3
 8003282:	d11b      	bne.n	80032bc <_fflush_r+0x58>
 8003284:	686c      	ldr	r4, [r5, #4]
 8003286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0ef      	beq.n	800326e <_fflush_r+0xa>
 800328e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003290:	07d0      	lsls	r0, r2, #31
 8003292:	d404      	bmi.n	800329e <_fflush_r+0x3a>
 8003294:	0599      	lsls	r1, r3, #22
 8003296:	d402      	bmi.n	800329e <_fflush_r+0x3a>
 8003298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800329a:	f7ff faa3 	bl	80027e4 <__retarget_lock_acquire_recursive>
 800329e:	4628      	mov	r0, r5
 80032a0:	4621      	mov	r1, r4
 80032a2:	f7ff ff59 	bl	8003158 <__sflush_r>
 80032a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032a8:	07da      	lsls	r2, r3, #31
 80032aa:	4605      	mov	r5, r0
 80032ac:	d4e0      	bmi.n	8003270 <_fflush_r+0xc>
 80032ae:	89a3      	ldrh	r3, [r4, #12]
 80032b0:	059b      	lsls	r3, r3, #22
 80032b2:	d4dd      	bmi.n	8003270 <_fflush_r+0xc>
 80032b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032b6:	f7ff fa96 	bl	80027e6 <__retarget_lock_release_recursive>
 80032ba:	e7d9      	b.n	8003270 <_fflush_r+0xc>
 80032bc:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <_fflush_r+0x70>)
 80032be:	429c      	cmp	r4, r3
 80032c0:	d101      	bne.n	80032c6 <_fflush_r+0x62>
 80032c2:	68ac      	ldr	r4, [r5, #8]
 80032c4:	e7df      	b.n	8003286 <_fflush_r+0x22>
 80032c6:	4b04      	ldr	r3, [pc, #16]	; (80032d8 <_fflush_r+0x74>)
 80032c8:	429c      	cmp	r4, r3
 80032ca:	bf08      	it	eq
 80032cc:	68ec      	ldreq	r4, [r5, #12]
 80032ce:	e7da      	b.n	8003286 <_fflush_r+0x22>
 80032d0:	08003578 	.word	0x08003578
 80032d4:	08003598 	.word	0x08003598
 80032d8:	08003558 	.word	0x08003558

080032dc <_lseek_r>:
 80032dc:	b538      	push	{r3, r4, r5, lr}
 80032de:	4d07      	ldr	r5, [pc, #28]	; (80032fc <_lseek_r+0x20>)
 80032e0:	4604      	mov	r4, r0
 80032e2:	4608      	mov	r0, r1
 80032e4:	4611      	mov	r1, r2
 80032e6:	2200      	movs	r2, #0
 80032e8:	602a      	str	r2, [r5, #0]
 80032ea:	461a      	mov	r2, r3
 80032ec:	f7fd fb20 	bl	8000930 <_lseek>
 80032f0:	1c43      	adds	r3, r0, #1
 80032f2:	d102      	bne.n	80032fa <_lseek_r+0x1e>
 80032f4:	682b      	ldr	r3, [r5, #0]
 80032f6:	b103      	cbz	r3, 80032fa <_lseek_r+0x1e>
 80032f8:	6023      	str	r3, [r4, #0]
 80032fa:	bd38      	pop	{r3, r4, r5, pc}
 80032fc:	200000f0 	.word	0x200000f0

08003300 <__swhatbuf_r>:
 8003300:	b570      	push	{r4, r5, r6, lr}
 8003302:	460e      	mov	r6, r1
 8003304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003308:	2900      	cmp	r1, #0
 800330a:	b096      	sub	sp, #88	; 0x58
 800330c:	4614      	mov	r4, r2
 800330e:	461d      	mov	r5, r3
 8003310:	da08      	bge.n	8003324 <__swhatbuf_r+0x24>
 8003312:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	602a      	str	r2, [r5, #0]
 800331a:	061a      	lsls	r2, r3, #24
 800331c:	d410      	bmi.n	8003340 <__swhatbuf_r+0x40>
 800331e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003322:	e00e      	b.n	8003342 <__swhatbuf_r+0x42>
 8003324:	466a      	mov	r2, sp
 8003326:	f000 f8bb 	bl	80034a0 <_fstat_r>
 800332a:	2800      	cmp	r0, #0
 800332c:	dbf1      	blt.n	8003312 <__swhatbuf_r+0x12>
 800332e:	9a01      	ldr	r2, [sp, #4]
 8003330:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003334:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003338:	425a      	negs	r2, r3
 800333a:	415a      	adcs	r2, r3
 800333c:	602a      	str	r2, [r5, #0]
 800333e:	e7ee      	b.n	800331e <__swhatbuf_r+0x1e>
 8003340:	2340      	movs	r3, #64	; 0x40
 8003342:	2000      	movs	r0, #0
 8003344:	6023      	str	r3, [r4, #0]
 8003346:	b016      	add	sp, #88	; 0x58
 8003348:	bd70      	pop	{r4, r5, r6, pc}
	...

0800334c <__smakebuf_r>:
 800334c:	898b      	ldrh	r3, [r1, #12]
 800334e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003350:	079d      	lsls	r5, r3, #30
 8003352:	4606      	mov	r6, r0
 8003354:	460c      	mov	r4, r1
 8003356:	d507      	bpl.n	8003368 <__smakebuf_r+0x1c>
 8003358:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800335c:	6023      	str	r3, [r4, #0]
 800335e:	6123      	str	r3, [r4, #16]
 8003360:	2301      	movs	r3, #1
 8003362:	6163      	str	r3, [r4, #20]
 8003364:	b002      	add	sp, #8
 8003366:	bd70      	pop	{r4, r5, r6, pc}
 8003368:	ab01      	add	r3, sp, #4
 800336a:	466a      	mov	r2, sp
 800336c:	f7ff ffc8 	bl	8003300 <__swhatbuf_r>
 8003370:	9900      	ldr	r1, [sp, #0]
 8003372:	4605      	mov	r5, r0
 8003374:	4630      	mov	r0, r6
 8003376:	f7ff fa57 	bl	8002828 <_malloc_r>
 800337a:	b948      	cbnz	r0, 8003390 <__smakebuf_r+0x44>
 800337c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003380:	059a      	lsls	r2, r3, #22
 8003382:	d4ef      	bmi.n	8003364 <__smakebuf_r+0x18>
 8003384:	f023 0303 	bic.w	r3, r3, #3
 8003388:	f043 0302 	orr.w	r3, r3, #2
 800338c:	81a3      	strh	r3, [r4, #12]
 800338e:	e7e3      	b.n	8003358 <__smakebuf_r+0xc>
 8003390:	4b0d      	ldr	r3, [pc, #52]	; (80033c8 <__smakebuf_r+0x7c>)
 8003392:	62b3      	str	r3, [r6, #40]	; 0x28
 8003394:	89a3      	ldrh	r3, [r4, #12]
 8003396:	6020      	str	r0, [r4, #0]
 8003398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800339c:	81a3      	strh	r3, [r4, #12]
 800339e:	9b00      	ldr	r3, [sp, #0]
 80033a0:	6163      	str	r3, [r4, #20]
 80033a2:	9b01      	ldr	r3, [sp, #4]
 80033a4:	6120      	str	r0, [r4, #16]
 80033a6:	b15b      	cbz	r3, 80033c0 <__smakebuf_r+0x74>
 80033a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033ac:	4630      	mov	r0, r6
 80033ae:	f000 f889 	bl	80034c4 <_isatty_r>
 80033b2:	b128      	cbz	r0, 80033c0 <__smakebuf_r+0x74>
 80033b4:	89a3      	ldrh	r3, [r4, #12]
 80033b6:	f023 0303 	bic.w	r3, r3, #3
 80033ba:	f043 0301 	orr.w	r3, r3, #1
 80033be:	81a3      	strh	r3, [r4, #12]
 80033c0:	89a0      	ldrh	r0, [r4, #12]
 80033c2:	4305      	orrs	r5, r0
 80033c4:	81a5      	strh	r5, [r4, #12]
 80033c6:	e7cd      	b.n	8003364 <__smakebuf_r+0x18>
 80033c8:	08002641 	.word	0x08002641

080033cc <__malloc_lock>:
 80033cc:	4801      	ldr	r0, [pc, #4]	; (80033d4 <__malloc_lock+0x8>)
 80033ce:	f7ff ba09 	b.w	80027e4 <__retarget_lock_acquire_recursive>
 80033d2:	bf00      	nop
 80033d4:	200000e4 	.word	0x200000e4

080033d8 <__malloc_unlock>:
 80033d8:	4801      	ldr	r0, [pc, #4]	; (80033e0 <__malloc_unlock+0x8>)
 80033da:	f7ff ba04 	b.w	80027e6 <__retarget_lock_release_recursive>
 80033de:	bf00      	nop
 80033e0:	200000e4 	.word	0x200000e4

080033e4 <_free_r>:
 80033e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80033e6:	2900      	cmp	r1, #0
 80033e8:	d044      	beq.n	8003474 <_free_r+0x90>
 80033ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033ee:	9001      	str	r0, [sp, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f1a1 0404 	sub.w	r4, r1, #4
 80033f6:	bfb8      	it	lt
 80033f8:	18e4      	addlt	r4, r4, r3
 80033fa:	f7ff ffe7 	bl	80033cc <__malloc_lock>
 80033fe:	4a1e      	ldr	r2, [pc, #120]	; (8003478 <_free_r+0x94>)
 8003400:	9801      	ldr	r0, [sp, #4]
 8003402:	6813      	ldr	r3, [r2, #0]
 8003404:	b933      	cbnz	r3, 8003414 <_free_r+0x30>
 8003406:	6063      	str	r3, [r4, #4]
 8003408:	6014      	str	r4, [r2, #0]
 800340a:	b003      	add	sp, #12
 800340c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003410:	f7ff bfe2 	b.w	80033d8 <__malloc_unlock>
 8003414:	42a3      	cmp	r3, r4
 8003416:	d908      	bls.n	800342a <_free_r+0x46>
 8003418:	6825      	ldr	r5, [r4, #0]
 800341a:	1961      	adds	r1, r4, r5
 800341c:	428b      	cmp	r3, r1
 800341e:	bf01      	itttt	eq
 8003420:	6819      	ldreq	r1, [r3, #0]
 8003422:	685b      	ldreq	r3, [r3, #4]
 8003424:	1949      	addeq	r1, r1, r5
 8003426:	6021      	streq	r1, [r4, #0]
 8003428:	e7ed      	b.n	8003406 <_free_r+0x22>
 800342a:	461a      	mov	r2, r3
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	b10b      	cbz	r3, 8003434 <_free_r+0x50>
 8003430:	42a3      	cmp	r3, r4
 8003432:	d9fa      	bls.n	800342a <_free_r+0x46>
 8003434:	6811      	ldr	r1, [r2, #0]
 8003436:	1855      	adds	r5, r2, r1
 8003438:	42a5      	cmp	r5, r4
 800343a:	d10b      	bne.n	8003454 <_free_r+0x70>
 800343c:	6824      	ldr	r4, [r4, #0]
 800343e:	4421      	add	r1, r4
 8003440:	1854      	adds	r4, r2, r1
 8003442:	42a3      	cmp	r3, r4
 8003444:	6011      	str	r1, [r2, #0]
 8003446:	d1e0      	bne.n	800340a <_free_r+0x26>
 8003448:	681c      	ldr	r4, [r3, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	6053      	str	r3, [r2, #4]
 800344e:	4421      	add	r1, r4
 8003450:	6011      	str	r1, [r2, #0]
 8003452:	e7da      	b.n	800340a <_free_r+0x26>
 8003454:	d902      	bls.n	800345c <_free_r+0x78>
 8003456:	230c      	movs	r3, #12
 8003458:	6003      	str	r3, [r0, #0]
 800345a:	e7d6      	b.n	800340a <_free_r+0x26>
 800345c:	6825      	ldr	r5, [r4, #0]
 800345e:	1961      	adds	r1, r4, r5
 8003460:	428b      	cmp	r3, r1
 8003462:	bf04      	itt	eq
 8003464:	6819      	ldreq	r1, [r3, #0]
 8003466:	685b      	ldreq	r3, [r3, #4]
 8003468:	6063      	str	r3, [r4, #4]
 800346a:	bf04      	itt	eq
 800346c:	1949      	addeq	r1, r1, r5
 800346e:	6021      	streq	r1, [r4, #0]
 8003470:	6054      	str	r4, [r2, #4]
 8003472:	e7ca      	b.n	800340a <_free_r+0x26>
 8003474:	b003      	add	sp, #12
 8003476:	bd30      	pop	{r4, r5, pc}
 8003478:	200000e8 	.word	0x200000e8

0800347c <_read_r>:
 800347c:	b538      	push	{r3, r4, r5, lr}
 800347e:	4d07      	ldr	r5, [pc, #28]	; (800349c <_read_r+0x20>)
 8003480:	4604      	mov	r4, r0
 8003482:	4608      	mov	r0, r1
 8003484:	4611      	mov	r1, r2
 8003486:	2200      	movs	r2, #0
 8003488:	602a      	str	r2, [r5, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	f7fd f9f0 	bl	8000870 <_read>
 8003490:	1c43      	adds	r3, r0, #1
 8003492:	d102      	bne.n	800349a <_read_r+0x1e>
 8003494:	682b      	ldr	r3, [r5, #0]
 8003496:	b103      	cbz	r3, 800349a <_read_r+0x1e>
 8003498:	6023      	str	r3, [r4, #0]
 800349a:	bd38      	pop	{r3, r4, r5, pc}
 800349c:	200000f0 	.word	0x200000f0

080034a0 <_fstat_r>:
 80034a0:	b538      	push	{r3, r4, r5, lr}
 80034a2:	4d07      	ldr	r5, [pc, #28]	; (80034c0 <_fstat_r+0x20>)
 80034a4:	2300      	movs	r3, #0
 80034a6:	4604      	mov	r4, r0
 80034a8:	4608      	mov	r0, r1
 80034aa:	4611      	mov	r1, r2
 80034ac:	602b      	str	r3, [r5, #0]
 80034ae:	f7fd fa24 	bl	80008fa <_fstat>
 80034b2:	1c43      	adds	r3, r0, #1
 80034b4:	d102      	bne.n	80034bc <_fstat_r+0x1c>
 80034b6:	682b      	ldr	r3, [r5, #0]
 80034b8:	b103      	cbz	r3, 80034bc <_fstat_r+0x1c>
 80034ba:	6023      	str	r3, [r4, #0]
 80034bc:	bd38      	pop	{r3, r4, r5, pc}
 80034be:	bf00      	nop
 80034c0:	200000f0 	.word	0x200000f0

080034c4 <_isatty_r>:
 80034c4:	b538      	push	{r3, r4, r5, lr}
 80034c6:	4d06      	ldr	r5, [pc, #24]	; (80034e0 <_isatty_r+0x1c>)
 80034c8:	2300      	movs	r3, #0
 80034ca:	4604      	mov	r4, r0
 80034cc:	4608      	mov	r0, r1
 80034ce:	602b      	str	r3, [r5, #0]
 80034d0:	f7fd fa23 	bl	800091a <_isatty>
 80034d4:	1c43      	adds	r3, r0, #1
 80034d6:	d102      	bne.n	80034de <_isatty_r+0x1a>
 80034d8:	682b      	ldr	r3, [r5, #0]
 80034da:	b103      	cbz	r3, 80034de <_isatty_r+0x1a>
 80034dc:	6023      	str	r3, [r4, #0]
 80034de:	bd38      	pop	{r3, r4, r5, pc}
 80034e0:	200000f0 	.word	0x200000f0

080034e4 <_init>:
 80034e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034e6:	bf00      	nop
 80034e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ea:	bc08      	pop	{r3}
 80034ec:	469e      	mov	lr, r3
 80034ee:	4770      	bx	lr

080034f0 <_fini>:
 80034f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034f2:	bf00      	nop
 80034f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034f6:	bc08      	pop	{r3}
 80034f8:	469e      	mov	lr, r3
 80034fa:	4770      	bx	lr
